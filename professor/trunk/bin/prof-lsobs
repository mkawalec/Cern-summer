#! /usr/bin/env python

"""\
%prog [--weight=W] --datadir=DIR|--mcdir=DIR

List the observables available from the MC runs in DIR. This is useful for
making an initial weight-file for tuning.

The --weight=W flag is used to change the output format to give all the
observables an initial weight W, in the format which can be used by prof-tune.
"""

import sys
from os import mkdir
import professor.user as prof

from professor.tools import shell as shell
shell.usePrettyTraceback()
shell.setProcessName("prof-lsobs")

## Parse command line
import optparse
parser = optparse.OptionParser(usage=__doc__, version=prof.version)
prof.addDataCLOptions(parser, mc=True)
prof.addLoggingCLOptions(parser)
parser.add_option("-o", "--outfile", metavar="FILE", dest="OUTFILE", default=None,
                  help="Write out to file FILE [default: write to terminal")
parser.add_option("--weight", metavar="W", dest="WEIGHT", default=None, type=float,
                  help="Add weight W to the output for each observable")
parser.add_option("--correlations", dest="CORR", default=None,
                  help="Create correlation files per observable in given directory.")
opts, args = parser.parse_args()

# TODO: Allow selection/exclusion of observables by name/regex (cf. aida2flat)

## Build DataProxy
try:
    dataproxy = prof.DataProxy.mkFromCLOptions(opts)
    obsvs = dataproxy.getMCData().getAvailableObservables()
    maxlen = max(len(o) for o in obsvs)
    out = sys.stdout
    if opts.OUTFILE is not None:
        out = open(opts.OUTFILE, "w")

    if opts.CORR is not None:
        try:
            mkdir(opts.CORR)
        except OSError, ex:
            if ex[0] != 17:
                sys.exit(-1)
    for obsname in obsvs:
        if opts.WEIGHT is None:
            out.write(obsname + "\n")
        else:
            out.write(obsname.ljust(maxlen+2) + str(opts.WEIGHT) + "\n")
        if opts.CORR:
            obsname = obsname[1:].split(":")[0].replace("/","--")
            open(opts.CORR+"/"+obsname,'a').close()
        
    if opts.OUTFILE is not None:
        out.close()
except Exception, e:
    sys.stderr.write("Error! " + str(e) + "\n")
    sys.exit(1)

# TODO: Reinstate some inspection of specific AIDA/other files.

# PATHS = args
# if not PATHS:
#     PATHS.append(".")

# def get_obs(paths):
#     obs = set()
#     for p in paths:
#         if not os.path.exists(p):
#             sys.stderr.write(__doc__.replace("%prog",
#                                              os.path.basename(sys.argv[0])))
#             sys.stderr.write("\nError: No such file or directory: %s\n" % p)
#             sys.exit(1)
#         if os.path.isdir(p):
#             subpaths = glob.glob1(p, "*.aida")
#             subpaths = [os.path.join(p, sp) for sp in subpaths]
#             obs.update(get_obs(subpaths))
#         else:
#             histos = prof.Histo.fromAIDA(p)
#             for h in histos.values():
#                 if not math.isnan(h.getArea()):
#                     obs.add(h.histopath)
#     return obs

# for o in get_obs(PATHS):
#     print o
