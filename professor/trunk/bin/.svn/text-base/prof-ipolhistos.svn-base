#! /usr/bin/env python

"""\
%prog [options] --datadir IPOLDIR [--obsfile OBSFILE] [--runsfile RUNSFILE]
        [--paramsfile PARAMSFILE|--params PAR1=42.0,...]

Create parameterised histograms at a user defined parameter point.

The histograms are stored in AIDA format files in OUTDIR, with one file for each
run combination in RUNSFILE. The bin contents are calculated from bin
parameterisations that were created by prof-interpolate: the parameterisation
must already have been created, and contain parameterisations for all the
requested observables.

If you want to use the AIDA files later as fake MC data you can use the
`--subdirs' switch.
"""

import sys, os
import professor.user as prof
from professor.tools.progressbar import ForLoopProgressBar as flpb

import optparse
parser = optparse.OptionParser(usage=__doc__, version=prof.version)
parser.add_option("--subdirs",
                  dest = "SUBDIRS",
                  action = "store_true",
                  default = False,
                  help = "Create fake-run subdirectories in OUTDIR for each run combination.")
parser.add_option("--outaida",
                  dest = "OUTAIDA",
                  action = "store_true",
                  default = False,
                  help = "Output filename will be 'out.aida'")
parser.add_option("-i", "--inplace",
                  dest = "INPLACE",
                  action = "store_true",
                  default = False,
                  help = "Write output files to the location of the 'used_params' file")
prof.addRunCombsCLOptions(parser)
parser.add_option("--paramsfile",
                  dest = "PARAMSFILE",
                  help = "File with the parameter values. If it is"
                  " a result pickle file, the first result is used.")
parser.add_option("--params", "--paramsvector",
                  dest = "PARAMSVECTOR",
                  help = "Parameter values as comma-separated list. E.g."
                  " PAR1=42.0,PAR2=0.23 .")
parser.add_option("--paramsdir",
                  dest = "PARAMSDIR",
                  help = "Folder containing sub-directories with 'used_params' files")
prof.addLoggingCLOptions(parser)
prof.addIpolCLOptions(parser)
prof.addOutputCLOptions(parser)
prof.addDataCLOptions(parser, mc=True, ipol=True, scan=False)
opts, args = parser.parse_args()

prof.log.setPriority(opts)
prof.writeGuideLine()

## Check/make output directory
paths = prof.DataProxy.getPathsFromCLOptions(opts)


# See if we want to write the outout files to the folder where the used_params
if opts.PARAMSDIR and opts.INPLACE:
    outdir = opts.PARAMSDIR
    prof.log.debug("Output directory for interpolation histograms: %s" % outdir)

elif paths["outdir"]:
     outdir = os.path.join(paths["outdir"], "ipolhistos")
     prof.io.makeDir(outdir)
     prof.log.debug("Output directory for interpolation histograms: %s" % outdir)
else:
    prof.log.error("No output path specified. Use -o PATH or -i CL options")
    sys.exit(1)




# DataProxy object
dataproxy = prof.DataProxy.mkFromCLOptions(opts)

## Read in parameter values.
superparamdict = {}
paramdict = None
if not (opts.PARAMSVECTOR or opts.PARAMSFILE or opts.PARAMSDIR):
    prof.log.error(parser.format_help())
    prof.log.error("No parameters specified! Use the --paramsfile or --paramsvector option.")
    sys.exit(1)

if ((opts.PARAMSVECTOR and opts.PARAMSFILE) or
    (opts.PARAMSVECTOR and opts.PARAMSDIR) or
    (opts.PARAMSFILE and opts.PARAMSDIR)):
    prof.log.error(parser.format_help())
    prof.log.error("More than one option given, use only --paramsfile, --paramsvector or --paramsdir")
    sys.exit(1)

if opts.PARAMSVECTOR is not None:
    superparamdict["000"] = prof.ParameterPoint.mkFromString(opts.PARAMSVECTOR)
elif opts.PARAMSFILE is not None:
    try:
        parampoint = prof.ParameterPoint.mkFromFile(opts.PARAMSFILE)
        prof.log.info("Reading parameters from parameter file %s" % opts.PARAMSFILE)
    except Exception, err:
        prof.log.debug("Failed to read parameter point file with %s: %s" % (type(err), err))
        parampoint = prof.ResultList.mkFromPickle(opts.PARAMSFILE)[0].values
        prof.log.info("Reading parameters from result file %s" % opts.PARAMSFILE)
    superparamdict["000"] = parampoint
    del parampoint
elif opts.PARAMSDIR is not None:
    for d in os.listdir(opts.PARAMSDIR):
        if not os.path.isdir(os.path.join(opts.PARAMSDIR, d)):
            continue
        p = os.path.join(opts.PARAMSDIR, d, "used_params")
        if os.path.exists(p):
            superparamdict[d] = prof.ParameterPoint.mkFromFile(p)
        else:
            prof.log.warn("Could not find 'used_params' in %s" % os.path.join(opts.PARAMSDIR, d))
else:
    raise RuntimeError("Strange logic in this program!")


## Check data directories.
ipoldir = prof.DataProxy.getPathsFromCLOptions(opts)["ipol"]
prof.log.debug("ipoldir: %s" % ipoldir)
if not prof.io.isDirR(ipoldir):
    prof.log.error("Interpolation data directory is not a directory or has bad permissions: %s" % ipoldir)
    prof.log.error("Exiting!")
    sys.exit(1)


## Get the configured interpolation class.
try:
    IpolCls = prof.InterpolationClass
    IpolCls.method = opts.IPOLMETHOD
    prof.log.info("Using %s for parameterisation." % IpolCls.__name__)
except Exception, e:
    prof.log.error("Problem getting parameterisation method: %s" % e)
    prof.log.error("Exiting!")
    sys.exit(1)


## Load run combinations
allruns = []
if opts.RUNSFILE:
    prof.log.debug("Using %s as runsfile" % opts.RUNSFILE)
    try:
        rcm = prof.RunCombManager.mkFromFile(opts.RUNSFILE)
        allruns = rcm.runcombs
    except Exception, e:
        prof.log.error("Error while opening run combination file %s: %s" % (opts.RUNSFILE, e))
        sys.exit(1)
else:
    prof.log.debug("No run combination file given! Using all available runs.")
    allruns.append(dataproxy.getMCData().availableruns)
prof.log.info("Loaded %i run combinations" % len(allruns))


## Check that all interpolations are available in ipoldir.
for runs in allruns:
    path = dataproxy.getIpolFilePath(IpolCls, runs)
    if not os.path.exists(path):
        prof.log.error("Could not find interpolation file for runs %s: %s" % (sorted(runs), path))
        prof.log.error("Please call prof-interpolate with the correct arguments first!")
        prof.log.error("Exiting!")
        sys.exit(1)


## Select the observables we want to use
if opts.OBSERVABLEFILE:
    try:
        prof.io.testReadFile(opts.OBSERVABLEFILE)
        wm = prof.WeightManager.mkFromFile(opts.OBSERVABLEFILE)
    except Exception, e:
        prof.log.error("Problem when reading observable file: %s" % e)
        prof.log.error("Exiting!")
        sys.exit(1)
    prof.log.debug("Loaded observable file from %s" % opts.OBSERVABLEFILE)
else:
    prof.log.debug("No observable file given! Using all available observables.")
    wm = prof.WeightManager()
    for obsname in dataproxy.getMCData().getAvailableObservables():
        wm.addBinRangeWeight(obsname)
prof.log.debug("Loaded observables: %s" % wm)
observables = wm.observables


def mkIpolHistos(observables, ipolset, parampoint, outpath):
    prof.log.debug("Writing interpolation histograms to %s" % outpath)
    f = open(outpath, "w")
    f.write('<?xml version="1.0" encoding="ISO-8859-1" ?>\n')
    f.write('<!DOCTYPE aida SYSTEM "http://aida.freehep.org/schemas/3.3/aida.dtd">\n')
    f.write('<aida version="3.3">\n')
    for obsname in sorted(observables):
        h = prof.Histo()
        h.name = obsname
        ## Loop over bin interpolations for this observable, sorted by bin number
        obsipols = [i for binid, i in ipolset.iteritems() if binid.startswith(obsname)]
        for i in sorted(obsipols, key=lambda ipol: int(ipol.binid.split(":")[1])):
            h.addBin(i.getBin(parampoint))
        f.write(h.asAIDA() + "\n\n")
    f.write("</aida>\n")
    f.close()


def buildhistos(runs, iruns):
    ## Load interpolation set
    # path = dataproxy.getIpolFilePath(IpolCls, runs)
    # prof.log.debug("Loading ipolset from %s" % (path))
    # ipolset = prof.InterpolationSet.mkFromPickle(path)
    ipolset = dataproxy.getInterpolationSet(IpolCls, runs)
    ipolhistonames = ipolset.getHistogramNames()

    global outdir
    ## Check that we have the interpolations
    global observables
    if observables is not None:
        for obs in observables:
            if not obs in ipolhistonames:
                prof.log.error("Could not find interpolation for histogram %s"
                        " in file %s !" % (obs, path))
                prof.log.error("Please call prof-interpolate with the correct"
                        " arguments first!")
                prof.log.error("Exiting!")
                sys.exit(1)
    else:
        observables = ipolhistonames
        prof.log.warning("No observable file specified, plotting all"
                        " observables found.")

    bar = flpb(0, len(superparamdict), 30, 'Producing ipol-histos ')
    for num, paramkey in enumerate(sorted(superparamdict.keys())):
        bar.update(num)
        parampoint = superparamdict[paramkey]
        # check that all parameters are defined
        if parampoint.names != ipolset.getParameterNames():
            msg = ("Different sets of parameters for parameter key '%s':\n"
                   "  parameter file: %s\n"
                   "  interpolations: %s" % (paramkey, parampoint.names,
                                             ipolset.getParameterNames()))
            prof.log.error(msg)
            sys.exit(1)

        # Create subdirectories only if necessary, as fake MC if requested
        if superparamdict:
            thisout = os.path.join(outdir, "%.3i"%int(paramkey))
        if opts.SUBDIRS:
            thisout = os.path.join(outdir, "FakeMC%03i" % iruns)
        prof.io.makeDir(thisout)

        if not opts.OUTAIDA:
            outpath = os.path.join(thisout, "histo-%03i.aida" % iruns)
        else:
            outpath = os.path.join(thisout, "out.aida")

        mkIpolHistos(observables, ipolset, parampoint, outpath)

for i, runs in enumerate(allruns):
    buildhistos(runs, i)
