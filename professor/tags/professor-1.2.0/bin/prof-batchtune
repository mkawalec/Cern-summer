#! /usr/bin/env python

"""\
Usage: %prog [prof-tune options] -N <numscripts> <templatefile>

Create qsub-mittable scripts for prof-tune or prof-interpolate.

This is to spread the workload of dealing with multiple run combinations
over a cluster. The scripts are created together with their specific run
combination file in a subdirectory (--outdir).

Note: The template variable names begin with a '@'. To create a literal '@'
in the output script files use '@@' in the template.
"""

## Note that in this script all paths should be made absolute from the beginning!

import os, sys
from string import Template
from professor import user as prof
from professor.tools.progressbar import ForLoopProgressBar as flpb

# Define our Template class that uses '@' as variable delimiter.
class AtTemplate(Template):
    delimiter = "@"

## Parse command line options
import optparse
parser = optparse.OptionParser(usage=__doc__, version=prof.version)
prof.addRunCombsCLOptions(parser)
parser.add_option("-N",
                  type = "int",
                  dest = "NUMSCRIPTS",
                  default = None,
                  help = "The number of scripts that should be produced. [default: one"
                  " script per run combination, usually a lot!]")
parser.add_option("-o", "--options",
                  dest = "ADDITIONALOPTIONS",
                  default = "",
                  help = "string with options that are passed through to the batch"
                  " script. Make sure that paths are absolute in here!")
parser.add_option("-p", "--paramsfile",
                  dest = "PARAMSFILE",
                  help = "File with parameter sampling boundaries")
parser.add_option("-s", "--script-outdir",
                  dest = "SCRIPTOUTDIR",
                  help = "script output directory [default: %default]")
parser.add_option("-j", "--outdir",
                  dest = "JOBBASEOUTDIR",
                  default = "./jobout",
                  help = "job output base directory [default: %default]")
prof.addDataCLOptions(parser, mc=True, ref=True, ipol=True, scan=False)
prof.addLoggingCLOptions(parser)
opts, args = parser.parse_args()
prof.log.setPriority(opts)
prof.writeGuideLine()

# DataProxy object
datadirs = prof.DataProxy.getPathsFromCLOptions(opts)

def convertPath(path):
    """Convert paths to absolute paths suitable for batch scripts.

    We don't need to expand tildes, that's done by the shell before.
    """
    return os.path.abspath(path)

## Identify and read template file
if len(args) != 1:
    sys.stderr.write("Exactly one template file must be given as argument!\n")
    sys.exit(1)

templatefile = args[0]
prof.io.testReadFile(templatefile)

f = open(templatefile)
template = AtTemplate("".join(f.readlines()))

scriptbasename = os.path.splitext(os.path.basename(templatefile))[0]


## Read observable file and check for accessibility
obsfile = convertPath(opts.OBSERVABLEFILE)
prof.io.testReadFile(obsfile)

## Read runcombsfile
try:
    f = open(opts.RUNSFILE, "r")
    # keep the '\n' at the end of the lines so we don't need to add them
    # when the job-runcombs are written
    runcombs = f.readlines()
    f.close()
except Exception, err:
    sys.stderr.write("Error while reading run combinations file %s:\n"
                     "%s\n" % (opts.RUNSFILE, err))
    sys.exit(1)

## Write single runcombs to file and instantations
#  Create some directories first

# Make an educated guess for directory to write template intantiations to if
# -s is not used on command line
if opts.SCRIPTOUTDIR is None:
    # the professor target script "tune" or "interpolate"
    proftarget = os.path.basename(templatefile)
    proftarget = os.path.splitext(proftarget)[0]
    proftarget = proftarget.replace("prof-", "")
    temp = "./scripts_%s_%s" % (proftarget,
                                os.path.basename(opts.OBSERVABLEFILE))
    scriptoutdir = convertPath(temp)
else:
    scriptoutdir = convertPath(opts.SCRIPTOUTDIR)

if not os.path.exists(scriptoutdir):
    os.makedirs(scriptoutdir)
prof.io.testWriteDir(scriptoutdir)

jobbaseoutdir = convertPath(opts.JOBBASEOUTDIR)
if not os.path.exists(jobbaseoutdir):
    os.makedirs(jobbaseoutdir)
prof.io.testWriteDir(jobbaseoutdir)

## Check data directories.
refdir  = convertPath(datadirs["ref"])
ipoldir = convertPath(datadirs["ipol"])
mcdir = convertPath(datadirs["mc"])


## TODO: Some of these checks might be duplicates of checks in DataProxy.
prof.io.testReadDir(refdir)

prof.io.makeDir(ipoldir)

if opts.NUMSCRIPTS is None:
    runcombs = [[line] for line in runcombs]
else:
    # TODO: this isn't working all the time, i.e. for 101 lines and 14
    # desired scripts the last one is empty
    t = []
    step = len(runcombs)/opts.NUMSCRIPTS + 1
    for i in range(opts.NUMSCRIPTS):
        t.append(runcombs[i*step:(i+1)*step])
    # XXX: dirty hack to remove empty sub-lists
    t = filter(lambda l: len(l) > 0, t)
    runcombs = t


bar = flpb(0, len(runcombs), 30, 'Saving template instantiations ')
for num, lines in enumerate(runcombs):
    bar.update(num)
    rcombpath = os.path.join(scriptoutdir, "runcomb%03i.dat" % (num))
    scriptpath = os.path.join(scriptoutdir,
                              "%s-%03i.sh" % (scriptbasename, num))
    f = open(rcombpath, "w")
    f.writelines(lines)
    f.close()

    # Fill template
    tokens = {
        'PROF_JOB'        : "%03i" % (num),
        'PROF_MCDIR'      : mcdir,
        'PROF_REFDIR'     : refdir,
        'PROF_OBSFILE'    : obsfile,
        'PROF_OUTDIR'     : jobbaseoutdir,
        'PROF_RUNSFILE'   : rcombpath,
        'PROF_IPOLDIR'    : ipoldir,
        'PROF_ADD_OPTS'   : opts.ADDITIONALOPTIONS,
        'PROF_IPOL_HISTOS': None,
        'PROF_PARAMSFILE' : None
        }
    if num == 0 and "complete" in templatefile:
        tokens['PROF_IPOL_HISTOS'] = "%s/../min_ipol_histos_%s" % (
                        convertPath(opts.JOBBASEOUTDIR),
                        opts.OBSERVABLEFILE.split("/")[-1])
    if num == len(runcombs) - 1 and "complete" in templatefile:
        print "sick!"
        tokens['PROF_PARAMSFILE'] = convertPath(opts.PARAMSFILE) # Useful for prof-plotchi2vsparam command issued in batch script
        print tokens['PROF_PARAMSFILE'], scriptpath
    f = open(scriptpath, "w")
    f.write(template.substitute(tokens))
    f.close()

print "Tip:"
print "If you created prof-tune scripts you can use"
print "  prof-mergeminresults -o merged-results.pkl %s/*/*pkl" % (jobbaseoutdir)
print "to merge the results into a single file."
print
print "Created %i scripts in %s" % (num+1, scriptoutdir)
