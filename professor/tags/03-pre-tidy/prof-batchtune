#! /usr/bin/env python

usage = """Usage: %prog [prof-tune options] <templatefile>

Create qsub-mittable scripts for prof-tune or prof-interpolate.

This is to spread the workload of dealing with multiple run combinations
over a cluster. The scripts are created together with their specific run
combination file in a subdirectory (--outdir).
"""
# Note that in this script all paths should be made absolute from the
# beginning!


from optparse import OptionParser
import os, sys, logging

## Try importing Cheetah (non-standard Python package)
try:
    from Cheetah.Template import Template
except:
    sys.stderr.write(PROGNAME + " requires Cheetah (www.cheetahtemplate.org)\n");
    sys.exit(1)

from professor import rivetreader as RR
from professor.tools import messages


## Set up logging
logging.basicConfig(level=20, format="%(message)s")

## Parse command line options
parser = OptionParser(usage=usage)
parser.add_option("-R", "--runsfile", "--runcombs",
        dest = "runsfile",
        help = "File with run combinations to use (space separated, 1"
            " combination per line). (default: %default)")
parser.add_option("-N",
        type = "int",
        dest = "numscripts",
        help = "The number of scripts that should be produced. (default: one"
            " script per run combination, usually a lot!")
parser.add_option("-o", "--options",
        dest = "additionaloptions",
        help = "string with options that are passed through to the batch"
            " script. Make sure that paths are absolute in here!")
parser.add_option("-s", "--script-outdir",
        dest = "scriptoutdir",
        help = "script output directory (default: %default)")
parser.add_option("-j", "--outdir",
        dest = "jobbaseoutdir",
        help = "job output base directory (default: %default)")
parser.set_defaults(
        runsfile = "runcombs.dat",
        numscripts = None,
        additionaloptions = "",
        scriptoutdir = "./",
        jobbaseoutdir = "./jobout"
        )

RR.addDataCLOptions(parser)

# parser.add_option("-m", "--mcdir",   help="Select MC dir")
# parser.add_option("-r", "--refdir",  help="Select reference data dir")
# parser.add_option("-i", "--ipoldir", help="Select ipol dir")
# parser.add_option("-R", "--runcombs",help="Select runcombs file")
# parser.add_option("-O", "--obsfile", help="Observable/weight-file")
# parser.add_option("-o", "--outdir",  help="Directory for result storage")
# parser.add_option("--interpolate", action="store_true", default=False,
        # help="Switch to interpolation mode")

(opts, args) = parser.parse_args()
sys.stdout.write(messages.guideline)
sys.stdout.flush()

# We don't need to expand tildes, that's done by the shell before.
def convertPath(path):
    return os.path.abspath(path)

## Identify and read template file
if len(args) != 1:
    sys.stderr.write("Exactly one template file must be given as argument!")
    sys.exit(1)

templatefile = args[0]
if not (os.path.isfile(templatefile) and
        os.access(templatefile, os.R_OK)):
    sys.stderr.write("Given template has no read permission or is not a"
            " file: %s\n" % (templatefile))
    sys.exit(1)
template = Template.compile(file=templatefile)
scriptbasename = os.path.splitext(os.path.basename(templatefile))[0]


## Read observable file and check for accessibility
obsfile = convertPath(opts.observablefile)
if not (os.path.isfile(obsfile) and
        os.access(obsfile, os.R_OK)):
    sys.stderr.write("Given observable file has no read permission or is not a"
            " file: %s\n" % (obsfile))
    sys.exit(1)

## Read runcombsfile
try:
    f = open(opts.runsfile,"r")
    # keep the '\n' at the end of the lines so we don't need to add them
    # when the job-runcombs are written
    runcombs = f.readlines()
    f.close()
except Exception, err:
    sys.stderr.write("Error while reading run combinations file %s:\n"
                     "%s\n" % (opts.runsfile, err))

## Write single runcombs to file and instantations
#  Create some directories first
scriptoutdir = convertPath(opts.scriptoutdir)
if not os.path.exists(scriptoutdir):
    os.makedirs(scriptoutdir)
elif (not os.path.isdir(scriptoutdir) or
      not os.access(scriptoutdir, os.W_OK|os.R_OK)):
    sys.stderr.write("Script output directory exists but is not a directory"
            " or has bad permissions: %s" % (scriptoutdir))
    sys.exit(1)

jobbaseoutdir = convertPath(opts.jobbaseoutdir)
if not os.path.exists(jobbaseoutdir):
    os.makedirs(jobbaseoutdir)
elif (not os.path.isdir(jobbaseoutdir) or
      not os.access(jobbaseoutdir, os.W_OK|os.R_OK)):
    sys.stderr.write("Script output directory exists but is not a directory"
            " or has bad permissions: %s" % (scriptoutdir))
    sys.exit(1)

## Check data directories.
refdir = convertPath(RR.getDataDirectories(opts)["ref"])
ipoldir = convertPath(RR.getDataDirectories(opts)["ipol"])
mcdir = convertPath(RR.getDataDirectories(opts)["mc"])

if (not os.path.isdir(refdir) or
    not os.access(refdir, os.R_OK|os.X_OK)):
    logging.error("Reference data directory is not a directory or has bad"
            " permissions: %s" % (refdir))
    logging.error("Exiting!")
    sys.exit(1)

if (not os.path.isdir(mcdir) or
    not os.access(mcdir, os.R_OK|os.X_OK)):
    logging.error("MC data directory is not a directory or has"
            " bad permissions: %s" % (mcdir))
    logging.error("Exiting!")
    sys.exit(1)

if not os.path.exists(ipoldir):
    print "Creating interpolation directory: %s" % (ipoldir)
    os.makedirs(ipoldir)
elif (not os.path.isdir(ipoldir) or
    not os.access(ipoldir, os.R_OK|os.X_OK)):
    logging.error("Interpolation data directory is not a directory or has"
            " bad permissions (we require rwx!): %s" % (ipoldir))
    logging.error("Exiting!")
    sys.exit(1)

if opts.numscripts is None:
    runcombs = [[line] for line in runcombs]
else:
    t = []
    step = len(runcombs)/opts.numscripts + 1
    for i in range(opts.numscripts):
        t.append(runcombs[i*step:(i+1)*step])
    runcombs = t

for num, lines in enumerate(runcombs):
    rcombpath = os.path.join(scriptoutdir, "runcomb%03i.dat" % (num))
    scriptpath = os.path.join(scriptoutdir, "%s-%03i.sh" % (scriptbasename, num))
    f = open(rcombpath, "w")
    f.writelines(lines)
    f.close()

    # Fill template
    tokens = {
        'PROF_JOB'      : "%03i" % (num),
        'PROF_MCDIR'    : mcdir,
        'PROF_REFDIR'   : refdir,
        'PROF_OBSFILE'  : obsfile,
        'PROF_OUTDIR'   : jobbaseoutdir,
        'PROF_RUNSFILE' : rcombpath,
        'PROF_IPOLDIR'  : ipoldir,
        'PROF_ADD_OPTS' : opts.additionaloptions
        }
    f = open(scriptpath, "w")
    tmpl = template(namespaces=[tokens])
    f.write(str(tmpl))
    f.close()

print "Tip:"
print "If you created prof-tune scripts you can use"
print "  prof-mergeminresults -o merged-results.pkl %s/*/*pkl" % (jobbaseoutdir)
print "to merge the results into a single file."
print 
print "Created %i scripts in %s" % (num+1, scriptoutdir)
