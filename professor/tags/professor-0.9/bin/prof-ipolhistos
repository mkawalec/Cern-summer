#!/usr/bin/env python
"""%prog [options] --ipoldir IPOLDIR [--obsfile OBSFILE] [--runsfile RUNSFILE]
        [--paramsfile PARAMSFILE|--paramsvector PAR1:42.0,...]
or
%prog [options] --datadir DATADIR [--obsfile OBSFILE] [--runsfile RUNSFILE]
        [--paramsfile PARAMSFILE|--paramsvector PAR1:42.0,...]

Create interpolated histograms at a user defined parameter point.

The histograms are store in flat format files in OUTDIR/, one file for each
run combination in RUNSFILE. The bincontents are calculated from
bin-interpolations that were created by prof-interpolate.

Use rivet's flat2aida and aida2flat to convert these files into lists of
files that you can use with compare-histos.
"""

import sys
import os
import logging
logging.basicConfig(level=logging.INFO, format = "%(levelname)s %(message)s")

import optparse

from professor.tools.parameter import readParameterFile, ParameterPoint
from professor.tuningdata import TuningData, SingleTuneData
from professor import rivetreader as RR
from professor.minimize import result
from professor.tools import messages
from professor.tools.progressbar import ForLoopProgressBar as flpb
from professor import interpolation
from professor import lighthisto

parser = optparse.OptionParser(usage=__doc__)
parser.add_option("-d", "--debug",
        dest = "debug",
        action = "store_true",
        help = "Turn debug logging on.")
parser.add_option("-o", "--outdir",
        dest = "outdir",
        help = "Save histogram data here. This will overwrite files with"
            " colliding names! (default: %default)")
parser.add_option("-R", "--runsfile", "--runcombs",
        dest = "runsfile",
        help = "File with run combinations to use (space separated, 1"
            " combination per line). (default: %default)")
parser.add_option("--pf", "--paramsfile",
        dest = "paramsfile",
        help = "File with the parameter values.")
parser.add_option("--pv", "--paramsvector",
        dest = "paramsvector",
        help = "Parameter values as comma-separated list. E.g."
            " PAR1=42.0,PAR2=0.23 .")
parser.add_option("--pd", "--paramsdir",
        dest = "paramsdir",
        help = "Folder containing sub-directories with 'used_params' files")

parser.set_defaults(
        debug = False,
        runsfile = "runcombs.dat",
        outdir = "."
        )

interpolation.addCLOptions(parser)
RR.addDataCLOptions(parser)

opts, args = parser.parse_args()
if opts.debug:
    logging.getLogger().setLevel(logging.DEBUG)

sys.stdout.write(messages.guideline)
sys.stdout.flush()

## Read in parameter values.
superparamdict = {}
paramdict = None
if (opts.paramsvector is None and opts.paramsfile is None and
        opts.paramsdir is None):
    logging.error(parser.format_help())
    logging.error("No parameters specified! Use the --paramsfile or"
            " --paramsvector option.")
    sys.exit(1)
elif ((opts.paramsvector and opts.paramsfile) or
        (opts.paramsvector and opts.paramsdir) or
        (opts.paramsfile and opts.paramsdir)):
    logging.error(parser.format_help())
    logging.error("More than one option given, use only --paramsfile, "
            "--paramsvector or paramsdir")
    sys.exit(1)
elif opts.paramsvector is not None:
    paramdict = {}
    tokens = opts.paramsvector.split(",")
    for t in tokens:
        name, val = t.split("=")
        paramdict[name] = float(val)
    superparamdict["000"] = paramdict
elif opts.paramsfile is not None:
    try:
        paramdict = readParameterFile(opts.paramsfile)
        logging.info("Reading parameters from parameter file %s" % (
                     opts.paramsfile))
    except:
        paramdict = result.ResultList.fromPickle(opts.paramsfile)[0].asDict()
        logging.info("Reading parameters from result file %s"%opts.paramsfile)
    superparamdict["000"] = paramdict
elif opts.paramsdir is not None:
    for d in os.listdir(opts.paramsdir):
        if os.path.exists(os.path.join(opts.paramsdir, d, "used_params")):
            superparamdict[d] = readParameterFile(os.path.join(opts.paramsdir, d, "used_params"))
        else:
            logging.warn("Could not find 'used_params' in %s: %s" % (
                         os.path.join(opts.paramsdir, d), err))
else:
    raise RuntimeError("Strange logic in this program!")

## Check data directories.
ipoldir = RR.getDataDirectories(opts)["ipol"]
logging.debug("ipoldir: %s" % (ipoldir))
if (not os.path.isdir(ipoldir) or
    not os.access(ipoldir, os.R_OK|os.X_OK)):
    logging.error("Interpolation data directory is not a directory or has"
            " bad permissions: %s" % (ipoldir))
    logging.error("Exiting!")
    sys.exit(1)

## Check output directory.
if os.path.exists(opts.outdir):
    if (not os.path.isdir(opts.outdir)
            or not os.access(opts.outdir, os.W_OK|os.X_OK)):
        logging.error("Output directory for interpolation histograms is not"
                " a directory or has bad permissions: %s" % (opts.outdir))
        logging.error("Exiting!")
        sys.exit(1)
else:
    logging.info("Creating output directory for interpolation histograms:"
            " %s" % (opts.outdir))
    os.makedirs(opts.outdir)
logging.info("Output directory for interpolation histograms: %s" % (
    opts.outdir))


## Get the configured interpolation class.
try:
    IpolCls = interpolation.getInterpolationClass(opts.ipolmethod,
            opts.useweave)
    logging.info("Using %s for interpolation." % (IpolCls.__name__))
except Exception, e:
    logging.error("Problem getting interpolation method: %s" % (e))
    logging.error("Exiting!")
    sys.exit(1)

## Load run combinations
logging.debug("Using %s as runsfile" % (opts.runsfile))
try:
    runfile = open(opts.runsfile, "r")
except Exception, e:
    logging.error("Error while opening run combination file %s: %s" %
            (opts.runsfile, e))
    sys.exit(1)
allruns = [line.split() for line in runfile.readlines()]
runfile.close()
logging.info("Loaded %i run combinations from %s" % (len(allruns),
    opts.runsfile))

## Check that all interpolations are available in ipoldir.
for runs in allruns:
    name = RR.getIpolFilename(IpolCls, runs)
    path = os.path.join(ipoldir, name)
    if not os.path.exists(path):
        logging.error("Could not find interpolation file for runs %s: %s" % (
            sorted(runs), name))
        logging.error("Please call prof-interpolate with the correct"
                " arguments first!")
        logging.error("Exiting!")
        sys.exit(1)

## Select the observables we want to use for our tune.
obsdict = None
if opts.observablefile:
    try:
        obsdict = RR.readObservableFile(opts.observablefile)
    except Exception, e:
        logging.error("Problem when reading observable file: %s" % (e))
        logging.error("Exiting!")
        sys.exit(1)
    logging.debug("Loaded observable file from %s: %s" % (
                  opts.observablefile, obsdict))

def buildhistos(runs, iruns):
    # load interpolation set
    fname = RR.getIpolFilename(IpolCls, runs)
    path = os.path.join(ipoldir, fname)
    logging.debug("Loading ipolset from %s" % (path))
    ipolset = interpolation.InterpolationSet.fromPickle(path)
    ipolhistonames = ipolset.getHistogramNames()

    # check that we have the interpolations
    global obsdict
    if obsdict is not None:
        for obs in obsdict.iterkeys():
            if not obs in ipolhistonames:
                logging.error("Could not find interpolation for histogram %s"
                        " in file %s !" % (obs, fname))
                logging.error("Please call prof-interpolate with the correct"
                        " arguments first!")
                logging.error("Exiting!")
                sys.exit(1)
    else:
        obsdict = dict.fromkeys(ipolhistonames)
        logging.warning("No observable file specified, plotting all"
                        " observables found.")
    bar = flpb(0, len(superparamdict), 30, 'Producing ipol-histos ')
    for num, paramkey in enumerate(sorted(superparamdict.keys())):
        bar.update(num)
        paramdict = superparamdict[paramkey]
        # check that all parameters are defined
        for parameter in ipolset.center.getKeys():
            if parameter not in paramdict.keys():
                logging.error("Interpolation parameter not defined on"
                        " commandline or parameter file: %s" % (parameter))
                sys.exit(1)
        for parameter in paramdict.keys():
            if parameter not in ipolset.center.getKeys():
                logging.error("Interpolation parameter not defined on"
                        " commandline or parameter file: %s" % (parameter))
                sys.exit(1)

        # scale parameter point
        scaledpoint = ParameterPoint(paramdict, ipolset.scaler).getScaled()

        # Create subdirectories only if necessary.
        if len(superparamdict) > 1:
            outdir = os.path.join(opts.outdir, paramkey)
        else:
            outdir = opts.outdir
        if not os.path.exists(outdir):
            logging.debug("Creating output directory '%s'" % (outdir))
            os.makedirs(outdir)

        outname = os.path.join(outdir, "histo-%03i.dat" % (iruns))
        logging.debug("Writing interpolation histograms to %s" % (outname))
        f = open(outname, "w")
        for obsname in sorted(obsdict.iterkeys()):
            h = lighthisto.Histo()
            h.name = obsname
            # get bin interpolations for this observable
            obsipols = [i for binid, i in ipolset.iteritems()
                            if binid.startswith(obsname)]
            #loop, sorted by bin number
            for i in sorted(obsipols,
                            key=lambda ipol: int(ipol.binid.split(":")[1])):
                h.addBin(i.getBin(scaledpoint))
            f.write(h.asFlat() + "\n\n")
        f.close()

for i, runs in enumerate(allruns):
    buildhistos(runs, i)
