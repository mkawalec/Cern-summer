#! /usr/bin/env python

"""\
%prog [options] --datadir <DATADIR>  -c <CONFLEVEL>[, ...]

Produce envelope plots (dat-files) that can be plotted by make-plots.

TODO:
  * error envelope
"""

import sys, os

import professor.user as prof
import professor.controlplots as profCP
from professor.tools.stringtools import safeFilename

import optparse
parser = optparse.OptionParser(usage=__doc__, version=prof.version)
parser.add_option('-o', '--outdir',
                  dest = "OUTDIR",
                  default='envelopes',
                  help="Specify the subdirectory, where plots are to be"
                       " saved [default: %default]")
prof.addRunCombsCLOptions(parser)
parser.add_option("--tune", metavar="MC.aida[:NAME]",
                  dest = "TUNES",
                  default = [],
                  action = "append",
                  help = "Plot MC tunes for reference. Can be specified multiple times.")
parser.add_option('-c', '--cl', action="append",
                  dest = "CL",
                  default = [],
                  help="Confidence levels, e.g. '-c 68  -c95'"
                       " [default: %default]")
parser.add_option('--logy',
                  dest = "LOGY",
                  default=False, action='store_true',
                  help="Make a LogY=1 appear in all dat-files.")
prof.addDataCLOptions(parser, mc=True, ref=True, ipol=False, scan=False)
prof.addLoggingCLOptions(parser)

opts, args = parser.parse_args()
prof.log.setPriority(opts)
prof.writeGuideLine()

dataproxy = prof.DataProxy.mkFromCLOptions(opts)

## Check if specified outdir exists and create it otherwise.
if not os.path.exists(opts.OUTDIR):
    os.makedirs(opts.OUTDIR)
prof.io.testWriteDir(opts.OUTDIR)

## List confidence levels in reversed order for plotting.
conflevels = sorted(map(float, opts.CL), reverse=True)

## Check if supplied confidence levels are valid.
if min(conflevels) < 0.0 or max(conflevels) > 100:
    prof.log.error("Confidence level must be between 0 and 100.")
    sys.exit(1)

## Load tune AIDA files.
tunes = []
num_unnamed = 0
for s in opts.TUNES:
    t = s.split(":")
    path = t[0]

    if len(t) == 1:
        num_unnamed += 1
        title = "tune %i" % num_unnamed
    elif len(t) == 2:
        title = t[1]
    else:
        prof.log.error("Failed to parse command line argument for MC tune:"
                       " '%s'" % s)
        sys.exit(1)

    ext = os.path.splitext(path)[1]
    if ext == ".aida":
        runhistos = profCP.TuneHisto.fromAIDA(path)
    elif ext == ".dat":
        runhistos = profCP.TuneHisto.fromFlat(path)
    else:
        prof.log.error("Failed to load MC tune file '%s': Unkown extension:"
                       " '%s'" % (path, ext))
        sys.exit(1)
    for histo in runhistos.values():
        histo.title = title
    tunes.append(runhistos)


## Check for MC data and load MC histos.
try:
    mcdata = dataproxy.getMCData("sample")
except prof.DataProxyError, err:
    prof.log.error("Fatal error:")
    prof.log.error("No MC data found! Use the `--datadir' or `--mcdir'"
                  " option!")
    sys.exit(1)
prof.log.info("Loading MC runs...")
if not opts.RUNSFILE:
    mcdata.loadAllRuns()
else:
    prof.io.testReadFile(opts.RUNSFILE)
    prof.log.debug("Using %s as runsfile" % opts.RUNSFILE)

    ## ... and load run combinations
    runfile = open(opts.RUNSFILE, "r")
    allruns = runfile.readline()
    runfile.close()
    prof.log.info("Loaded run combinations from %s" % opts.RUNSFILE)
    for run in allruns.strip().split():
        mcdata.loadRun(run)
    mcdata.availableruns = tuple(allruns.strip().split())
prof.log.info("Done loading MC runs")

if len(mcdata.availableruns) <= 1:
    prof.log.error("Envelope for %i histograms not meaningful, exiting." % (
                   len(mcdata.availableruns)))
    sys.exit(1)

## Load list of observables from file.
if opts.OBSERVABLEFILE:
    wm = prof.WeightManager()
    wm.loadWeightsFile(opts.OBSERVABLEFILE)
    observables = sorted(wm.observables)
    prof.log.info("Read observables to plot from %s" % (opts.OBSERVABLEFILE))

    ## Check for MC data for all observables.
    missing = set(observables)
    missing.difference_update(mcdata.availablehistos)
    if len(missing):
        sys.stderr.write("Some observables in observable file '%s' are not"
                         " available in MC data: %s\n" % (
                         opts.OBSERVABLEFILE,
                         list(missing)))
        sys.stderr.write("Exiting!\n")
        sys.exit(1)
    for obs in missing:
        prof.log.warn("Observable '%s' is missing in MC data!" % (obs))
else:
    prof.log.info("Plotting all observables available in MC data")
    observables = mcdata.getAvailableObservables()

## Create envelope plotting object.
## Try first to build it with reference data and fall back to pure MC data.
try:
    # This throws an error if it's not set.
    dataproxy.refpath
    envelgetter = profCP.EnvelopeGetter(dataproxy)
except prof.DataProxyError:
    envelgetter = profCP.EnvelopeGetter(mcdata)

envelgetter.tunes = tunes

# Initialise PlotParser.
envelgetter.plotparser = prof.PlotParser()

# Save envelope-plots in the directory specified via --outdir.
for obs in observables:
    prof.log.info("Creating envelope for %s" % (obs))
    outname = "%s-envelope.dat" % (safeFilename(obs))
    outpath = os.path.join(opts.OUTDIR, outname)

    envelgetter.obs = obs
    try:
        for cl in conflevels:
            envelgetter.addConfidenceLevel(cl)
    except prof.DataProxyError, err:
        prof.log.error("Failed to build envelope for obs '%s':"
                      " %s" % (obs, err))
        continue

    f = open(os.path.join(opts.OUTDIR, outname), "w")
    f.write(envelgetter.plotMakePlots(logy=opts.LOGY))
    f.close()

print ("Use 'make-plots --pdf *.dat' to plot the dat-files and"
       " 'contrib/makegallery.py -s pdf envelopes.html' for html-gallery")
