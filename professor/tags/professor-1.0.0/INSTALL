Installing Professor
====================

.. note::

    If you have access to the CERN AFS file system you can try to use
    a version of professor installed under
    :file:`/afs/cern.ch/sw/lcg/external/MCGenerators/professor`.

In order to use the professor tools you will need the following external
packages:

`Numpy <http://numpy.scipy.org>`_
    The numpy datatypes are used for most numerical calculations.

`SciPy <http://www.scipy.org>`_
    The SciPy implementation of the matrix pseudo-inversion is used.

`PyMinuit <http://code.google.com/p/pyminuit/>`_ or `PyMinuit2 <http://code.google.com/p/pyminuit2/>`_
    PyMinuit is used to interface with the well known MINUIT package.

`Matplotlib <http://matplotlib.sourceforge.net>`_
    Most of the plotting tools require matplotlib to produce output.

    :program:`prof-I` requires the `wxWindows <http://www.wxwindows.org>`_
    backend for matplotlib.

Except for PyMinuit all current Linux distributions should come with
recent enough versions of these packages.

Up to now there is no released version of professor. Instead you are
required to check out the svn version by::

    svn checkout http://svn.hepforge.org/professor/trunk/

This will create a directory :file:`trunk` with a :file:`bin` and
:file:`professor` directory. The :file:`bin` directory contains all
scripts that come with professor (and that are prefixed by `prof-`). The
:file:`professor` directory contains the library modules that are shared
by the professor scripts.

To make the professor scripts and modules available you have several
options:

1. Quick and dirty: Add the :file:`bin` directory to your :envvar:`$PATH` and
   :file:`professor` to your :envvar:`$PYTHONPATH` by doing::

       export PATH="/path/to/trunk/bin:$PATH"
       export PYTHONPATH="/path/to/trunk/professor:$PYTHONPATH"

   in your shell (for C-shells the above commands must be modified).
   This should allow you to run the professor scripts from the command
   line, e.g.::

       prof-tune -h

   To make this persistent between shell sessions you can add the above
   lines to your shell's runtime configuration, e.g.
   :file:`$HOME/.bashrc`.

   The down-side of this is that your environment variables might get a
   bit overloaded and on a multi-user system this has to be done by
   every user.

2. More systematic: Alternatively, you can use the :command:`setup.py`
   script that is distributed with professor and offers the usual
   options, try::

       ./setup.py --help

   in the :file:`trunk` directory.

   :option:`--prefix` allows you to give a directory under which
   professor is installed similar to the usual `.configure && make &&
   make install` triple jump, e.g.::

      ./setup.py --prefix $HOME/local install

   will install the scripts in :file:`$HOME/local/bin` and the modules
   in :file:`$HOME/local/lib/python{XY}/site-packages/` where `XY` is
   the Python version available at this instance.

   An interesting alternative to `install` is `develop`. This will
   create files, that work as links to the scripts and
   :file:`professor` directory at the right places. The benefit is that
   when you update your local copy of :file:`trunk` by executing::

       svn update

   in :file:`trunk`, the scripts in :file:`{PREFIX}/bin` and the library
   modules are automatically updated aswell.
