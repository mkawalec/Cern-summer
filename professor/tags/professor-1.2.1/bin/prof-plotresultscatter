#! /usr/bin/env python
"""%prog [OPTIONS] RESULT.pkl [RESULT2.pkl ...]

Plot the GoF vs. minimisation results, one plot for each parameter.
"""

import sys, os
import professor.user as prof
import professor.controlplots as profCP
from professor.tools.stringtools import safeFilename

import optparse
parser = optparse.OptionParser(usage = __doc__, version=prof.version)
parser.add_option("--logy",
                  dest = "LOGY",
                  action = "store_true",
                  default = False,
                  help = "Log scaled chi^2 axis")
parser.add_option("--liny",
                  dest = "LOGY",
                  action = "store_false",
                  default = False,
                  help = "Linear scaled chi^2 axis [default]")
parser.add_option("--no-legend",
                  dest = "SHOWLEGEND",
                  action = "store_false",
                  default = True,
                  help = "Turn off legend boxes.")
parser.add_option("--ndof",
                  dest = "NDOF",
                  action = "store_true",
                  default = True,
                  help = "Plot chi^2/ndof instead of chi^2. [default]")
parser.add_option("--no-ndof",
                  dest = "NDOF",
                  action = "store_false",
                  default = True,
                  help = "Plot chi^2 instead of chi^2/ndof.")
parser.add_option("-m", "--maxruns-value",
                  dest = "MAXRUNSVALUE",
                  action = "store_true",
                  default = False,
                  help = "Add text with the value of the max. runs result to the plot.")
parser.add_option("--suffix",
                  dest = "SUFFIX",
                  default = None,
                  help = "suffix for plot file names (will be prepended with a _)")
parser.add_option("--ranges", "--paramsfile",
                  dest= "RANGES", metavar="RANGEFILE",
                  help = "Parameter ranges with the sampling ranges used for the"
                  " anchor points.")
parser.add_option("-a", "--annotate-result", metavar="LABELED_RESULT",
                  dest = "LABELEDRESULTS",
                  action = "append",
                  default = [],
                  help = "Additional result that is annotated in the plots. The label"
                  " must be separated by a ':', e.g. '<RESULTSFILE>:<LABEL>'."
                  " The first result stored in RESULTSFILE is used. Multiple"
                  " results can be specified by repeating this option.")
parser.add_option("-r", "--runs",
                  dest = "DIFFRUNS",
                  default = True,
                  action = "store_true",
                  help = "Change display style with the number of runs. [default]")
parser.add_option("-R", "--no-runs",
                  dest = "DIFFRUNS",
                  action = "store_false",
                  default = True,
                  help = "Don't change display style with the number of runs.")
parser.add_option("-s", "--startpoints",
                  dest = "DIFFSTARTPOINTS",
                  action = "store_true",
                  default = False,
                  help = "Change display style with initial point method.")
parser.add_option("-S", "--no-startpoints",
                  dest = "DIFFSTARTPOINTS",
                  action = "store_false",
                  default = False,
                  help = "Don't change display style with startpoints. [default]")
parser.add_option("--limits",
                  dest = "DIFFLIMITS",
                  action = "store_true",
                  default = False,
                  help = "Change display style if limits were used or not. [default]")
parser.add_option("-L", "--no-limits",
                  dest = "DIFFLIMITS",
                  action = "store_false",
                  default = False,
                  help = "Don't change display style if limits were used or not.")
parser.add_option("--format",
                  dest = "FORMAT",
                  type = "choice",
                  choices = ["makeplots", "matplotlib"],
                  default = "matplotlib",
                  help = "Choose format of output files [default: %default]")
prof.addDataCLOptions(parser, mc=False, ref=False, ipol=False, scan=False)
prof.addLoggingCLOptions(parser)
prof.addOutputCLOptions(parser)

opts, args = parser.parse_args()
prof.log.setPriority(opts)
prof.writeGuideLine()

## Setup matplotlib if necessary
if opts.FORMAT == "matplotlib":
    # TODO (25 Sep 2009): Is this still true?
    import matplotlib     # These two lines must be called before import pylab
    matplotlib.use('Agg') # to prevent memory leakage
    from matplotlib import pyplot
    pyplot.rcParams.update({
            'backend':'pdf',
            'figure.dpi': 300,
            'text.fontsize': 16,
            'legend.fontsize': 8,
            'axes.titlesize': 16,
            'axes.labelsize': 16,
            'xtick.labelsize': 16,
            'ytick.labelsize': 16,
            'lines.markersize':7,
            'figure.subplot.left' : 0.14,
            'figure.subplot.right' : 0.98,
            'figure.subplot.top' : 0.98,
            'figure.subplot.bottom' : 0.10,
            'text.usetex': False
            })

if len(args) == 0:
    sys.stderr.write(parser.format_help())
    sys.stderr.write("\nError: No result files given!")
    sys.exit(1)

try:
    paths = prof.DataProxy.getPathsFromCLOptions(opts)
    ## Ensure that we can write to output directories
    topoutdir = paths["outdir"]
    if not topoutdir:
        prof.log.error("No output directory given: Use the --datadir or --outdir option!")
        sys.exit(1)
except Exception, e:
    prof.log.error("Error: %s" % e)
    sys.exit(1)

## Check if specified outdir exists and create it otherwise.
outdir = os.path.join(topoutdir, "tunes", "resultscatter")
prof.log.debug("Using %s for result scatter output." % outdir)
prof.io.makeDir(outdir)

ranges = None
if opts.RANGES:
    ranges = prof.ParameterRange.mkFromFile(opts.RANGES)

labeledresults = []
for opt in opts.LABELEDRESULTS:
    path, label = opt.split(":")
    res = prof.ResultList.mkFromPickle(path)[0]
    labeledresults.append((label, res))
    prof.log.debug("Adding annotation '%s' -> %s" % (label, res))


## load result lists
rlists = []
for fname in args:
    rlists.append(prof.ResultList.mkFromPickle(fname))

dflags = []
if opts.DIFFRUNS:
    dflags.append("numruns")
if opts.DIFFSTARTPOINTS:
    dflags.append("startpoint")
if opts.DIFFLIMITS:
    dflags.append("limits")

def getPlotFilename(param, extension = "pdf"):
    param = safeFilename(param)
    fname = "chi2_" + param
    if opts.SUFFIX:
        fname += "_" + opts.SUFFIX
    fname += "." + extension
    return os.path.join(outdir, fname)


resplotter = profCP.ParameterScatterPlotter(rlists, dflags, labeledresults)
for param in resplotter.parameternames:
    if opts.FORMAT == "makeplots":
        fname = getPlotFilename(param, "dat")
        f = open(fname, "w")
        txt = resplotter.plotParamChi2MakePlots(param, opts.NDOF, ranges)
        f.write(txt)
        f.close()
        print "written " + fname

    elif opts.FORMAT == "matplotlib":
        fname = getPlotFilename(param)
        fig = pyplot.figure(facecolor="w")
        sub = fig.add_subplot(1,1,1)

        resplotter.plotParamChi2MPL(sub, param, opts.NDOF, ranges)

        # draw the text before we reset the plot limits
        if opts.MAXRUNSVALUE:
            try:
                value = resplotter.getMaxRunsValue(param)
                txt = r"$\mathrm{max}\ N_\mathrm{runs}"
                txt += r"\ \mathrm{result}:\ %f$" % (value)
                fig.text(0, 0, txt)
            except ValueError, err:
                prof.log.error("Could not get max runs value: %s" % (err))

        if opts.SHOWLEGEND:
            leg = sub.legend(loc="best")

        if opts.LOGY:
            sub.set_yscale("log")

        print "Saving file %s" % (fname)
        fig.savefig(fname)
