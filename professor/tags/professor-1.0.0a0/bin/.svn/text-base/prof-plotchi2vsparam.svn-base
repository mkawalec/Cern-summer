#! /usr/bin/env python
"""%prog [OPTIONS] RESULT.pkl [RESULT2.pkl ...]

Plot the GoF vs. minimisation results, one plot for each parameter.
"""

import sys
import os
import optparse

import professor.user as prof
import professor.controlplots as profCP


parser = optparse.OptionParser(usage = __doc__)
parser.add_option("--logy",
        dest = "logy",
        action = "store_true",
        help = "Log scaled chi^2 axis when PLOTMODE is chi2.")
parser.add_option("--liny",
        dest = "logy",
        action = "store_false",
        help = "Linear scaled chi^2 axis when PLOTMODE is chi2. (default)")
parser.add_option("--make-plots",
        dest = "makeplots",
        action = "store_true",
        help = "Produce make-plots .dat files instead of matplotlib pdf"
               " files.")
parser.add_option("--ndof",
        dest = "ndof",
        action = "store_true",
        help = "Plot chi^2/ndof instead of chi^2 when PLOTMODE is chi2."
               " (default)")
parser.add_option("--no-ndof",
        dest = "ndof",
        action = "store_false",
        help = "Plot chi^2 instead of chi^2/ndof when PLOTMODE is chi2.")
parser.add_option("-m", "--maxruns-value",
        dest = "maxrunsvalue",
        action = "store_true",
        help = "Show the value of the max. runs result in the legend box.")
parser.add_option("--outdir",
        help = "The directory were the plots are saved. (default: %default)")
parser.add_option("--suffix",
        help = "suffix for plot file names (will be prepended with a _)")
parser.add_option("--paramsfile",
        help = "The file that contains the parameters for prof-runrivet")
# parser.add_option("--bw",
        # dest = "bw",
        # action = "store_true",
        # help = "produce b/w safe plots, e.g. suitable for publications")
# parser.add_option("--color",
        # dest = "bw",
        # action = "store_false",
        # help = "produce color plots (default)")
parser.add_option("-r", "--runs",
        dest = "diffruns",
        action = "store_true",
        help = "change draw style with runs (default)")
parser.add_option("-R", "--no-runs",
        dest = "diffruns",
        action = "store_false",
        help = "don't change draw style with runs")
parser.add_option("-s", "--startpoints",
        dest = "diffstartpoints",
        action = "store_true",
        help = "change draw style with startpoints")
parser.add_option("-S", "--no-startpoints",
        dest = "diffstartpoints",
        action = "store_false",
        help = "don't change draw style with startpoints (default)")
parser.add_option("-l", "--limits",
        dest = "difflimits",
        action = "store_true",
        help = "change draw style with limits used or not (default)")
parser.add_option("-L", "--no-limits",
        dest = "difflimits",
        action = "store_false",
        help = "don't change draw style with limits used or not")
parser.set_defaults(
        logy = False,
        ndof = True,
        makeplots = False,
        maxrunsvalue = False,
        outdir = "./",
        diffruns = True,
        diffstartpoints = False,
        difflimits = False
        # bw = False
        )

opts, args = parser.parse_args()

## Setup matplotlib if necessary
if not opts.makeplots:
# TODO(25.Sep.2009): Is this still true?
    import matplotlib     # These two lines must be called before import pylab
    matplotlib.use('Agg') # to prevent memory leakage
    from matplotlib import pyplot
    pyplot.rcParams.update({
            'backend':'pdf',
            'figure.dpi': 300,
            'text.fontsize': 16,
            'legend.fontsize': 8,
            'axes.titlesize': 16,
            'axes.labelsize': 16,
            'xtick.labelsize': 16,
            'ytick.labelsize': 16,
            'lines.markersize':7,
            'figure.subplot.left' : 0.14,
            'figure.subplot.right' : 0.98,
            'figure.subplot.top' : 0.98,
            'figure.subplot.bottom' : 0.10,
            'text.usetex': False
            })


prof.writeGuideLine()

if len(args) == 0:
    sys.stderr.write(parser.format_help())
    sys.stderr.write("\n\nError: No result files given!")
    sys.exit(1)

if os.path.exists(opts.outdir):
    if (not os.path.isdir(opts.outdir)
            or not os.access(opts.outdir, os.R_OK|os.X_OK)):
        sys.stderr.write("Error: output directory is not a directory or has"
                " bad permissions: %s" % (opts.output))
        sys.exit(1)
else:
    print "Creating output directory: %s" % (opts.outdir)
    os.makedirs(opts.outdir)

samplebounds=None
if opts.paramsfile:
    samplebounds = prof.readParameterFile(opts.paramsfile)


## load result lists
rlists = []
for fname in args:
    rlists.append(prof.ResultList.fromPickle(fname))

dflags = []
if opts.diffruns:
    dflags.append("numruns")
if opts.diffstartpoints:
    dflags.append("startpoint")
if opts.difflimits:
    dflags.append("limits")

def getPlotFilename(param, extension = "pdf"):
    param = param.replace("/", "_").replace("(","_").replace(")","_")
    fname = "chi2_" + param
    if opts.suffix:
        fname += "_" + opts.suffix
    fname += "." + extension
    return os.path.join(opts.outdir, fname)


resplotter = profCP.ParameterScatterPlotter(rlists, dflags)
for param in resplotter.parameternames:
    if opts.makeplots:
        fname = getPlotFilename(param, "dat")
        f = open(fname, "w")
        txt = resplotter.plotParamChi2MakePlots(param, opts.ndof, samplebounds)
        f.write(txt)
        f.close()
        print "written " + fname
    else:
        fname = getPlotFilename(param)
        fig = pyplot.figure(facecolor="w")
        sub = fig.add_subplot(1,1,1)

        minx, maxx, miny, maxy = resplotter.plotParamChi2MPL(sub, param, opts.ndof)
        if opts.paramsfile:
            low = samplebounds[param][0]
            high = samplebounds[param][1]
            minx = min(minx, low)
            maxx = max(maxx, high)
            sub.axvline(x=low, linestyle = ":",
                    color = "g")
            sub.axvline(x=high, linestyle = ":",
                    color = "g", label = "Sampling boundaries")

        # draw the text before we reset the plot limits
        if opts.maxrunsvalue:
            try:
                value = resplotter.getMaxRunsValue(param)
                if (maxx - value) > (value - minx):
                    sub.text(maxx, miny,
                         r"$\mathrm{max}\ N_\mathrm{runs}\ \mathrm{result}:\ %f$" % (value),
                         ha = "right", va = "bottom")
                else:
                    sub.text(minx, miny,
                         r"$\mathrm{max}\ N_\mathrm{runs}\ \mathrm{result}:\ %f$" % (value),
                         ha = "left", va = "bottom")
            except ValueError, err:
                prof.log.error("Could not get max runs value: %s" % (err))

        minx -= 0.1*(maxx-minx)
        maxx += 0.1*(maxx-minx)
        miny -= 0.1*(maxy-miny)
        maxy += 0.1*(maxy-miny)
        sub.set_xlim((minx, maxx))
        sub.set_ylim((miny, maxy))

        leg = sub.legend(loc="best")

        sub.set_xlabel(param)
        if opts.ndof:
            sub.set_ylabel(r"$\chi^2/N_\mathrm{df}$")
        else:
            sub.set_ylabel(r"$\chi^2$")
        if opts.logy:
            sub.set_yscale("log")

        print "Saving file %s" % (fname)
        fig.savefig(fname)
