#! /usr/bin/env python

"""%prog [options] --ipoldir IPOLDIR [--obsfile OBSFILE] [--runsfile RUNSFILE]
        [--paramsfile PARAMSFILE|--paramsvector PAR1:42.0,...]
or
%prog [options] --datadir DATADIR [--obsfile OBSFILE] [--runsfile RUNSFILE]
        [--paramsfile PARAMSFILE|--paramsvector PAR1:42.0,...]

Create interpolated histograms at a user defined parameter point.

The histograms are store in flat format files in OUTDIR/, one file for each
run combination in RUNSFILE. The bincontents are calculated from
bin-interpolations that were created by prof-interpolate.

Use rivet's flat2aida and aida2flat to convert these files into lists of
files that you can use with compare-histos.

If you want to use the AIDA files later as fake MC data you can use the
`--subdirs' switch.
"""

import sys
import os

import optparse

import professor.user as prof
from professor.tools.progressbar import ForLoopProgressBar as flpb

parser = optparse.OptionParser(usage=__doc__)
parser.add_option("-d", "--debug",
        dest = "debug",
        action = "store_true",
        help = "Turn debug logging on.")
parser.add_option("-o", "--outdir",
        dest = "outdir",
        help = "Save histogram data here. This will overwrite files with"
            " colliding names! (default: %default)")
parser.add_option("--subdirs",
        dest = "subdirs",
        action = "store_true",
        help = "Create fake-run subdirectories in OUTDIR for each histogram.")
parser.add_option("-R", "--runsfile", "--runcombs",
        dest = "runsfile",
        help = "File with run combinations to use (space separated, 1"
            " combination per line). (default: %default)")
parser.add_option("--pf", "--paramsfile",
        dest = "paramsfile",
        help = "File with the parameter values.")
parser.add_option("--pv", "--paramsvector",
        dest = "paramsvector",
        help = "Parameter values as comma-separated list. E.g."
            " PAR1=42.0,PAR2=0.23 .")
parser.add_option("--pd", "--paramsdir",
        dest = "paramsdir",
        help = "Folder containing sub-directories with 'used_params' files")

parser.set_defaults(
        debug = False,
        runsfile = "runcombs.dat",
        subdirs = False,
        outdir = "."
        )

prof.addIpolCLOptions(parser)
prof.DataProxy.addDataCLOptions(parser, mc=False, ipol=True, scan=False)
opts, args = parser.parse_args()

prof.log.setPriority(opts)

prof.writeGuideLine()

# DataProxy object
dataproxy = prof.DataProxy.fromCLOptions(opts)

## Read in parameter values.
superparamdict = {}
paramdict = None
if (opts.paramsvector is None and opts.paramsfile is None and
        opts.paramsdir is None):
    prof.log.error(parser.format_help())
    prof.log.error("No parameters specified! Use the --paramsfile or"
            " --paramsvector option.")
    sys.exit(1)
elif ((opts.paramsvector and opts.paramsfile) or
        (opts.paramsvector and opts.paramsdir) or
        (opts.paramsfile and opts.paramsdir)):
    prof.log.error(parser.format_help())
    prof.log.error("More than one option given, use only --paramsfile, "
            "--paramsvector or paramsdir")
    sys.exit(1)
elif opts.paramsvector is not None:
    paramdict = {}
    tokens = opts.paramsvector.split(",")
    for t in tokens:
        name, val = t.split("=")
        paramdict[name] = float(val)
    superparamdict["000"] = paramdict
elif opts.paramsfile is not None:
    try:
        paramdict = prof.readParameterFile(opts.paramsfile)
        prof.log.info("Reading parameters from parameter file %s" % (
                     opts.paramsfile))
    except:
        paramdict = prof.ResultList.fromPickle(opts.paramsfile)[0].asDict()
        prof.log.info("Reading parameters from result file %s"%opts.paramsfile)
    superparamdict["000"] = paramdict
elif opts.paramsdir is not None:
    for d in os.listdir(opts.paramsdir):
        if os.path.exists(os.path.join(opts.paramsdir, d, "used_params")):
            superparamdict[d] = prof.readParameterFile(os.path.join(opts.paramsdir, d, "used_params"))
        else:
            prof.log.warn("Could not find 'used_params' in %s: %s" % (
                         os.path.join(opts.paramsdir, d), err))
else:
    raise RuntimeError("Strange logic in this program!")

## Check data directories.
ipoldir = prof.DataProxy.getPathsFromCLOptions(opts)["ipol"]
prof.log.debug("ipoldir: %s" % (ipoldir))
if (not os.path.isdir(ipoldir) or
    not os.access(ipoldir, os.R_OK|os.X_OK)):
    prof.log.error("Interpolation data directory is not a directory or has"
            " bad permissions: %s" % (ipoldir))
    prof.log.error("Exiting!")
    sys.exit(1)

## Check output directory.
if os.path.exists(opts.outdir):
    if (not os.path.isdir(opts.outdir)
            or not os.access(opts.outdir, os.W_OK|os.X_OK)):
        prof.log.error("Output directory for interpolation histograms is not"
                " a directory or has bad permissions: %s" % (opts.outdir))
        prof.log.error("Exiting!")
        sys.exit(1)
else:
    prof.log.info("Creating output directory for interpolation histograms:"
            " %s" % (opts.outdir))
    os.makedirs(opts.outdir)
prof.log.info("Output directory for interpolation histograms: %s" % (
    opts.outdir))


## Get the configured interpolation class.
try:
    IpolCls = prof.getInterpolationClass(opts.ipolmethod,
            opts.useweave)
    prof.log.info("Using %s for interpolation." % (IpolCls.__name__))
except Exception, e:
    prof.log.error("Problem getting interpolation method: %s" % (e))
    prof.log.error("Exiting!")
    sys.exit(1)

## Load run combinations
prof.log.debug("Using %s as runsfile" % (opts.runsfile))
try:
    runfile = open(opts.runsfile, "r")
except Exception, e:
    prof.log.error("Error while opening run combination file %s: %s" %
            (opts.runsfile, e))
    sys.exit(1)
allruns = [line.split() for line in runfile.readlines()]
runfile.close()
prof.log.info("Loaded %i run combinations from %s" % (len(allruns),
    opts.runsfile))

## Check that all interpolations are available in ipoldir.
for runs in allruns:
    path = dataproxy.getIpolFilePath(IpolCls, runs)
    if not os.path.exists(path):
        prof.log.error("Could not find interpolation file for runs %s: %s" % (
            sorted(runs), path))
        prof.log.error("Please call prof-interpolate with the correct"
                " arguments first!")
        prof.log.error("Exiting!")
        sys.exit(1)

observables = None
## Select the observables we want to use for our tune.
if opts.observablefile:
    try:
        W = prof.WeightManager.fromFile(opts.observablefile)
        observables = W.observables
    except Exception, e:
        prof.log.error("Problem when reading observable file: %s" % (e))
        prof.log.error("Exiting!")
        sys.exit(1)
    prof.log.debug("Loaded observable file from %s: %s" % (
                  opts.observablefile, observables))

def buildhistos(runs, iruns):
    # load interpolation set
    path = dataproxy.getIpolFilePath(IpolCls, runs)
    prof.log.debug("Loading ipolset from %s" % (path))
    ipolset = prof.InterpolationSet.fromPickle(path)
    ipolhistonames = ipolset.getHistogramNames()

    # check that we have the interpolations
    global observables
    if observables is not None:
        for obs in observables:
            if not obs in ipolhistonames:
                prof.log.error("Could not find interpolation for histogram %s"
                        " in file %s !" % (obs, path))
                prof.log.error("Please call prof-interpolate with the correct"
                        " arguments first!")
                prof.log.error("Exiting!")
                sys.exit(1)
    else:
        observables = ipolhistonames
        prof.log.warning("No observable file specified, plotting all"
                        " observables found.")
    bar = flpb(0, len(superparamdict), 30, 'Producing ipol-histos ')
    for num, paramkey in enumerate(sorted(superparamdict.keys())):
        bar.update(num)
        paramdict = superparamdict[paramkey]
        # check that all parameters are defined
        for parameter in ipolset.center.getKeys():
            if parameter not in paramdict.keys():
                prof.log.error("Interpolation parameter not defined on"
                        " commandline or parameter file: %s" % (parameter))
                sys.exit(1)
        for parameter in paramdict.keys():
            if parameter not in ipolset.center.getKeys():
                prof.log.error("Interpolation parameter not defined on"
                        " commandline or parameter file: %s" % (parameter))
                sys.exit(1)

        # scale parameter point
        scaledpoint = prof.ParameterPoint(paramdict, ipolset.scaler).getScaled()

        # Create subdirectories only if necessary.
        if len(superparamdict) > 1:
            outdir = os.path.join(opts.outdir, paramkey)
        else:
            outdir = opts.outdir
        # Create a fake-MC run subdirectory.
        if opts.subdirs:
            outdir = os.path.join(outdir, "FakeMC%03i" % (iruns))

        if not os.path.exists(outdir):
            prof.log.debug("Creating output directory '%s'" % (outdir))
            os.makedirs(outdir)

        outname = os.path.join(outdir, "histo-%03i.dat" % (iruns))
        prof.log.debug("Writing interpolation histograms to %s" % (outname))
        f = open(outname, "w")
        for obsname in sorted(observables):
            h = prof.Histo()
            h.name = obsname
            # get bin interpolations for this observable
            obsipols = [i for binid, i in ipolset.iteritems()
                            if binid.startswith(obsname)]
            #loop, sorted by bin number
            for i in sorted(obsipols,
                            key=lambda ipol: int(ipol.binid.split(":")[1])):
                h.addBin(i.getBin(scaledpoint))
            f.write(h.asFlat() + "\n\n")
        f.close()

for i, runs in enumerate(allruns):
    buildhistos(runs, i)
