#! /usr/bin/env python
"""%prog [options] --datadir <DATADIR> --cl <CONFLEVEL>[, ...]

Produce envelope plots (dat-files) that can be plotted by make-plots.

TODOS: error envelope
"""

import sys
import os

import professor.user as prof
import professor.controlplots as profCP

## Define a short cut for logging module.
logging = prof.log

from optparse import OptionParser
parser = OptionParser(usage=__doc__)
parser.add_option('-o', '--outdir', default='envelopes',
                  help="Specify the subdirectory, where plots are to be"
                       " saved [default: %default]")
parser.add_option('-c', '--cl', default="100",
                  help="Comma separated confidence levels, e.g. '-c 68,95'"
                       " [default %default]")
parser.add_option("--debug", action="store_true", default=False,
                  help="Turn on debug logging.")
prof.DataProxy.addDataCLOptions(parser, mc=True, ref=True, ipol=False,
                                scan=False)
opts, args = parser.parse_args()
logging.setPriority(opts)

dataproxy = prof.DataProxy.fromCLOptions(opts)

prof.writeGuideLine()

## Check if specified outdir exists and create it otherwise.
if not os.path.exists(opts.outdir):
    os.makedirs(opts.outdir)
prof.IOTests.WriteDir(opts.outdir)

## List confidence levels in reversed order for plotting.
conflevels = sorted(map(float, opts.cl.split(",")), reverse=True)
## Check if supplied confidence levels are valid.
if min(conflevels) < 0.0 or max(conflevels) > 100:
    logging.error("Confidence level must be between 0 and 100.")
    sys.exit(1)

## Check for MC data and load MC histos.
try:
    mcdata = dataproxy.getMCData("sample")
except prof.DataProxyError, err:
    logging.error("Fatal error:")
    logging.error("No MC data found! Use the `--datadir' or `--mcdir'"
                  " option!")
    sys.exit(1)
logging.info("Loading MC runs...")
mcdata.loadAllRuns()
logging.info("Done loading MC runs")

if len(mcdata.availableruns) <= 1:
    logging.error("Envelope for %i histograms not meaningful, exiting." % (
                   len(mcdata.availableruns)))
    sys.exit(1)

## Load list of observables from file.
if opts.observablefile:
    W = prof.WeightManager()
    W.loadWeightsFile(opts.observablefile)
    observables = sorted(W.observables)
    logging.info("Read observables to plot from %s" % (opts.observablefile))

    ## Check for MC data for all observables.
    missing = set(observables)
    missing.difference_update(mcdata.availablehistos)
    if len(missing):
        sys.stderr.write("Some observables in observable file '%s' are not"
                         " available in MC data: %s\n" % (
                         opts.observablefile,
                         list(missing)))
        sys.stderr.write("Exiting!\n")
        sys.exit(1)
    for obs in missing:
        logging.warn("Observable '%s' is missing in MC data!" % (obs))
else:
    logging.info("Plotting all observables available in MC data")
    observables = mcdata.getAvailableObservables()

## Create envelope plotting object.
try:
    # This throws an error if it's not set.
    dataproxy.refpath
    envelgetter = profCP.EnvelopeGetter(dataproxy)
except prof.DataProxyError:
    envelgetter = profCP.EnvelopeGetter(mcdata)

# Initialise PlotParser.
envelgetter.plotparser = prof.PlotParser()

# Save envelope-plots in the directory specified via --outdir.
for obs in observables:
    logging.info("Creating envelope for %s" % (obs))
    outname = "%s-envelope.dat" % (obs.strip("/").replace("/","_"))
    outpath = os.path.join(opts.outdir, outname)

    envelgetter.obs = obs
    try:
        for cl in conflevels:
            envelgetter.addConfidenceLevel(cl)
    except prof.DataProxyError, err:
        logging.error("Failed to build envelope for obs '%s':"
                      " %s" % (obs, err))
        continue

    f = open(os.path.join(opts.outdir, outname), "w")
    f.write(envelgetter.plotMakePlots())
    f.close()

print ("Use 'make-plots --pdf *.dat' to plot the dat-files and"
       " 'contrib/makegallery.py -s pdf envelopes.html' for html-gallery")
