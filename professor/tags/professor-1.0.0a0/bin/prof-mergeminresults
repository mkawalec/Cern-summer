#! /usr/bin/env python
usage = """%prog [options] <resultfile 1> <resultfile 2> [<resultfile 3> ...]

or

%prog [options] --fromdir <directory to crawl>
"""

import sys, os

import professor.user as prof

from optparse import OptionParser
parser = OptionParser(usage=usage)
parser.add_option("-o", "--outfile", dest="OUTFILE",
                  default="results_merged.pkl",
                  help="name of the (merged) output results file")
parser.add_option("--fromdir", dest="FROMDIR", action="store_true",
        default=False, help="If given, crawl directory given via " +
        "first arg for .pkl files in subdirectories")
(opts, args) = parser.parse_args()

prof.writeGuideLine()


def crawlDirForResults(crawldir):
    temp = {}
    rlist = []
    # iterate subdirectories and store .pkl files in a dictionary
    for subdir in os.listdir(crawldir):
        try:
            for rfile in os.listdir(subdir):
                if rfile.endswith(".pkl"):
                    temp[subdir] = rfile
        except OSError:
            continue

    # iterate through identified .pkl - files and try do read in Results
    for subdir, f in temp.iteritems():
        try:
            rlist.append(prof.ResultList.fromPickle(os.path.join(subdir, f)))
        except:
            continue

    return rlist



if opts.FROMDIR is False:
    resultlists = [prof.ResultList.fromPickle(i) for i in args]
else:
    if len(args) > 1:
        sys.stderr.write("Only one directory is allowed!")
        sys.exit(1)
    resultlists = crawlDirForResults(args[0])



### Check if all resultfiles belong to the same set of parameters
if resultlists:
    rtn = prof.ResultList()

    ### Check same params and append valid results
    pnames0 = sorted( resultlists[0].getParamNames() )
    for rl in resultlists:
        try:
            pnames = rl.getParamNames()
            if not sorted(pnames) == pnames0:
                print "ERROR: parameter names differ!"
                sys.exit(1)
            for result in rl:
                rtn.append(result)
        except:
            pass

    ### Check for consistency among observables used
    try:
        rtn.isValid()
    except ValueError:
        print "ERROR: You are trying to merge results that were derived from "
        print "minimizations that use different observables/weights!"
        sys.exit(1)


    ### Write merged results file to disk
    rtn.write(opts.OUTFILE)
    print "Done. Written merged ResultFiles to %s" % opts.OUTFILE
