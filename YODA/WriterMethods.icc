// This file contains boilerplate code for static writer functions in all
// classes inheriting from Writer. These methods just forward to the methods on
// the Writer base class, but code duplication can't be avoided without a
// preprocessor hack like this, AFAIK.


/// @name Writing a single analysis object.
//@{

/// Write out object @a ao to output stream @a stream.
static void write(std::ostream& stream, const AnalysisObject& ao) {
  create().write(stream, ao);
}

/// Write out object @a ao to file @a filename.
static void write(const std::string& filename, const AnalysisObject& ao) {
  create().write(filename, ao);
}

//@}


/// @name Writing multiple analysis objects by collection.
//@{

/// Write out a collection of objects @a objs to output stream @a stream.
static void write(std::ostream& stream, const std::vector<AnalysisObject*>& aos) {
  create().write(stream, aos.begin(), aos.end());
}
/// Write out a collection of objects @a objs to file @a filename.
static void write(const std::string& filename, const std::vector<AnalysisObject*>& aos) {
  create().write(filename, aos.begin(), aos.end());
}


/// Write out a collection of objects @a objs to output stream @a stream.
static void write(std::ostream& stream, const std::list<AnalysisObject*>& aos) {
  create().write(stream, aos.begin(), aos.end());
}
/// Write out a collection of objects @a objs to file @a filename.
static void write(const std::string& filename, const std::list<AnalysisObject*>& aos) {
  create().write(filename, aos.begin(), aos.end());
}


/// Write out a collection of objects @a objs to output stream @a stream.
static void write(std::ostream& stream, const std::set<AnalysisObject*>& aos) {
  create().write(stream, aos.begin(), aos.end());
}
/// Write out a collection of objects @a objs to file @a filename.
static void write(const std::string& filename, const std::set<AnalysisObject*>& aos) {
  create().write(filename, aos.begin(), aos.end());
}


/// Write out a collection of objects @a objs to output stream @a stream.
static void write(std::ostream& stream, const std::deque<AnalysisObject*>& aos) {
  create().write(stream, aos.begin(), aos.end());
}
/// Write out a collection of objects @a objs to file @a filename.
static void write(const std::string& filename, const std::deque<AnalysisObject*>& aos) {
  create().write(filename, aos.begin(), aos.end());
}

//@}


/// @name Writing multiple analysis objects by iterator range.
//@{

/// Write out the objects specified by start iterator @a begin and end
/// iterator @a end to output stream @a stream.
template <typename AOITER>
static void write(std::ostream& stream,
                  const AOITER& begin, const AOITER& end) {
  create().write(stream, begin, end);
}

/// Write out the objects specified by start iterator @a begin and end
/// iterator @a end to file @a filename.
template <typename AOITER>
static void write(const std::string& filename,
                  const AOITER& begin, const AOITER& end) {
  create().write(filename, begin, end);
}

//@}
