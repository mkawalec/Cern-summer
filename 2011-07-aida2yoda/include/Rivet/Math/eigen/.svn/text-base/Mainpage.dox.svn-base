o /** @mainpage Eigen

<h2>Table of contents</h2>
<a href="#overview">Overview</a><br/>
<a href="#license">License</a><br/>
<a href="#features">Features</a><br/>
<a href="#news">News</a><br/>
<a href="#download">Download</a><br/>
<a href="#kde">Relation to KDE</a><br/>
<a href="#examples">Examples</a><br/>
<a href="#applications">Applications using Eigen</a><br/>
<a href="#authors">Authors</a><br/>
<a href="#contact">Contact us</a><br/>
<a href="#mailinglist">Mailing list</a><br/>

<a name="overview"></a>
<h2>Overview</h2>

Eigen is a lightweight C++ template library for vector and matrix math,
a.k.a. linear algebra.

Unlike most other linear algebra libraries, Eigen focuses on the simple mathematical needs of applications: games and other OpenGL apps, spreadsheets and other office apps, etc. Eigen is dedicated to providing optimal speed with GCC.
<ul>
  <li>Its <a href="group__fixedsize.html">fixed-size</a> classes are specially optimized for small sizes up to 4, although it is theoretically possible to specialize them to any size. They never cause dynamic memory applications and the simple operations on them are as fast as is possible at least for sizes up to 4 (see <a href="#features">below</a>).</li>
  <li>Its <a href="group__dynamicsize.html">dynamic-size</a> classes are more flexible and suitable for larger sizes.</li>
</ul>
Both fixed-size and dynamic-size classes use the same underlying C++ code, thanks to a <a href="http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">curiously recurring template pattern</a>.

<a name="license"></a>
<h2>License</h2>

 Eigen is distributed under the GPL, but with an <a href="#exception">exception allowing any software to use it</a>. Thus, to the question
"Can my own project use Eigen?", the answer is a definite <b>yes</b>.

This is similar to the LGPL in spirit. The reason why we don't use the LGPL is that it doesn't make sense for a pure template library like Eigen, where all the code is in headers.

<a name="features"></a>
<h2>Features</h2>

<ul>
  <li><b>No dependency</b>. Only relies on the C++ Standard Library, and only does so for a few things.</li>
  <li>As a consequence: very good <b>portability</b>.</li>
  <li><b>Very good performance</b> (tested with GCC, should apply to other compilers as well):</li>
    <ul>
      <li>The <a href="group__fixedsize.html">fixed-size</a> classes are optimal in the sense that they're just plain C arrays with methods manipulating them. They never cause dynamic memory allocations. Checked with <a href="http://valgrind.org">valgrind</a>.
      <li>The assembly code generated by GCC has been carefully checked to make sure that loop unrolling and function inlining work as expected with "g++ -O2" and "g++ -O3".</li>
      <li>For the loops that GCC fails to unroll (mostly nested loops), we provide hand-unrolled versions for sizes up to 4.</li>
      <li>There is no "virtual" keyword in Eigen.</li>
      <li>Eigen never trades performance for syntactic sugar. When some method introduces a significant language overhead (e.g. returns an object by value), we provide an alternative method doing the same thing faster but without the syntactic sugar.</li>
    </ul>
  <li>Provides <a href="group__solving.html">easy-to-use classes</a> for <b>solving systems of linear equations</b>.</li>
  <li>Provides <a href="group__regression.html">easy-to-use functions</a> for <b>linear regression analysis</b>.</li>
  <li>Can perform <b>LU decompositions</b> and use them to invert matrices, compute rank, kernel, etc. </li>
  <li><b>Integrates nicely with <a href="http://www.opengl.org">OpenGL</a></b>:</li>
    <ul>
      <li>Provides <a href="group__projective.html">functions and classes</a> for <b>projective geometry</b>.</li>
      <li>Stores matrices in column-dominant order, hence matrices can be directly passed between OpenGL and Eigen.</li>
      <li>Uses an OpenGL-like typedef naming scheme, for instance Vector3f for vectors of floats of size 3.</li>
    </ul>
  <li><b>Robust</b>:</li>
    <ul>
      <li>Only uses algorithms that are guaranteed to work in all cases. For example, the LU decomposition is done with complete pivoting, which means that it works for all square matrices, even singular ones.</li>
      <li>Covered by <b>extensive unit-tests</b>.</li>
    </ul>
  </li>
  <li><b>Thread-safe</b>, though that's only as a consequence of staying simple and not trying to do advanced stuff like buffer sharing.
  <li><b>Floating-point-correct</b>. Eigen has a clear, simple and sound policy with respect to the inherent problems of <a href="http://en.wikipedia.org/wiki/IEEE_754">IEEE754</a> floating-point arithmetic.
  <li>Fully supports std::complex for matrices and vectors over the <b>complex numbers</b>.</li>
  <li>Is a <b>pure template library</b> and consists only of header files. Thus, using Eigen will only add a build-time dependency to your project.</li>
  <li>Uses standard asserts, controlled as usual by NDEBUG. To achieve optimal performance, turn them off by defining NDEBUG, e.g.</li> <pre align="center">g++ -O3 -DNDEBUG myprogram.cpp</pre>
</ul>

<a name="news"></a>
<h2>News</h2>

If you want to stay informed of Eigen news and releases, please subscribe to our <a href="#mailinglist">mailing list</a>. You can also browse the <a href="http://listengine.tuxfamily.org/lists.tuxfamily.org/eigen/">archive</a>.


<a name="download"></a>
<h2>Download</h2>
The source code of the latest release is here: <a href="http://download.tuxfamily.org/eigen/eigen-1.0.5.tar.gz">eigen-1.0.5.tar.gz</a><br/>

Alternatively, you can checkout the development tree by anonymous svn, by doing:
<pre>svn co svn://anonsvn.kde.org/home/kde/trunk/kdesupport/eigen</pre>
or view it online at this address:
<a href="http://websvn.kde.org/trunk/kdesupport/eigen/">http://websvn.kde.org/trunk/kdesupport/eigen/</a>

<a name="kde"></a>
<h2>Relation to KDE</h2>

First of all: Eigen doesn't have any dependency. In particular, it doesn't depend on any part of KDE or on Qt.<br/>

Eigen is part of the KDE project, in the sense that:
<ul>
  <li>Its <a href="http://websvn.kde.org/trunk/kdesupport/eigen/">development tree</a> is hosted in the <a href="http://websvn.kde.org">KDE repository</a>.</li>
  <li>It has been founded by, and is developed by KDE people.</li>
  <li>It has originally been designed for the needs of KDE applications, especially <a href="http://edu.kde.org/kalzium">Kalzium</a>.</li>
</ul>
However, we quickly realized that Eigen could be useful for non-KDE projects, whence our decision to make sure that it has no dependency on KDE or Qt.

Although Eigen itself doesn't have any dependency, the unit-tests and the example program require Qt 4.

<a name="examples"></a>
<h2>Examples</h2>
In <a href="http://websvn.kde.org/trunk/kdesupport/eigen/examples/qt/">examples/qt</a> is an example program demonstrating how Eigen's <a href="group__projective.html">projective-geometry</a> features can help writing OpenGL apps. See also <a href="http://bjacob.livejournal.com/2055.html">this blog entry</a>.

<a name="applications"></a>
<h2>Applications using Eigen</h2>

<ul>
  <li> <a href="http://edu.kde.org/kalzium">Kalzium</a>, as of
       the current development version that'll ship with KDE 4 in 2007. Eigen already allowed to add <a href="http://bjacob.livejournal.com/1762.html">some cool stuff</a> to Kalzium.</li>
  <li> <a href="http://www.koffice.org/kspread/">KSpread</a>, as of
       the current development version that'll ship with KOffice 2 in 2007. Eigen seems to cover well KSpread's linear algebra needs.</li>
</ul>

Please tell us if you know of other interesting projects using Eigen!

<a name="authors"></a>
<h2>Authors</h2>

<b>Lead Developer:</b> Benoit Jacob (jacob at math jussieu fr)

<b>Contributors:</b>
<ul>
  <li>Casper Boemann (cbr at boemann dk) : project co-founder, initial development</li>
  <li>David Faure (faure at kde dot org) : portability fixes</li>
  <li>Franz Keferboeck (franz keferboeck at gmail com) : contributions in matrixbase.h</li>
  <li>Carsten Niehaus (cniehaus at gmx de) : helped with QTestLib, Doxygen, CMake</li>
  <li>Inge Wallin (inge at lysator liu se) : project co-founder, initial development</li>
</ul>

<b>Special thanks to:</b>
Cyrille Berger, Sylvain Joyeux, Thiago Macieira, Pino Toscano

<a name="contact"></a>
<h2>Contact us</h2>

The best way to contact us is by means of our <a href="#mailinglist">mailing list</a>.<br/>
IRC Channel: \#eigen on Freenode.<br/>
Website (you're here): <a href="http://eigen.tuxfamily.org">http://eigen.tuxfamily.org</a><br/>

<a name="mailinglist"></a>
<h2>Mailing list</h2>

The Mailing list for Eigen is: eigen at lists tuxfamily org.<br/>

To subscribe, send a mail with subject "subscribe" to eigen-request at lists tuxfamily org.<br/>
To unsubscribe, send a mail with subject "unsubscribe" to eigen-request at lists tuxfamily org.<br/>

You can also browse the <a href="http://listengine.tuxfamily.org/lists.tuxfamily.org/eigen/">archive</a>.

<a name="exception"></a>
<h2>Exception to the GPL</h2>
Eigen is licensed under the GNU GPL, version 2 or later, plus the following exception, which is replicated into each of the source files of Eigen:
<pre>
// As a special exception, if other files instantiate templates or use macros
// or inline functions from this file, or you compile this file and link it
// with other works to produce a work based on this file, this file does not
// by itself cause the resulting work to be covered by the GNU General Public
// License. This exception does not invalidate any other reasons why a work
// based on this file might be covered by the GNU General Public License.
</pre>

*/
