YODA TODO list
==============

NOW


* Histo2D & Dbn2D: add Python interface mapping. (MICHAL)
  (done, compilation is fine, not tested yet, though)

* Test that a y-binned Histo2D has the same per-y-column stats as an
  equivalently x-binned Profile1D. Perhaps use this as an opportunity to
  implement one of the the conversion functions mentioned in the NEXT
  section... (MICHAL)

* Axis1D::scaleX(d), Axis2D::scaleX/Y(d), Axis2D::scaleXY(d, d),
  Scatter2D::scaleX/Y(d), Scatter2D::scaleXY(d, d). (MICHAL)
  (done, also added scaling for Scatter3D. Scaling of errors is done in a 
  veeery crude way)

* Rebinning: merges of n adjacent bins and global rebinning by integer factor
  (on widths or on bin groups?) (AB)

* Implement _setstate for Histo1D and Profile1D. (AB)

* Multiple errors on Scatter2D via a vector of Error2D. Combination rule enum
  arg (QUAD, LIN) on error() method (DANIEL)

* New "flat" file format: adapt WriterYODA and fill ReaderYODA. (HH)
  Need to persist the whole-histo Dbn1D/Dbn2Ds, and over/underflows.

* WriterFlat and ReaderFlat, for Scatter2D representations only. (HH)



NEXT

* Use Weights objects in Dbn1D / Dbn2D (AB)

* Add a Counter type (mostly a UI/persistency wrapper on Dbn1D) (AB)

* Conversion functions to build Histo1D and Profile1D objects for slicings and
  marginalisations along both X and Y directions of 2D histos. Throw an
  exception if binnings are not complete grids. (MICHAL)
  (done)

* Profile2D & Dbn3D

* Perhaps ProfileBin1D would be better if it contained a Dbn1D rather than two
  Dbn2Ds, since the over/underflow now *are* Dbn2Ds...

* Error correlations?

* Tests:
  Add bin-comparison and negative-weighted mean test(s)
  Test bin-by-index sorted behaviour on Histo and Profile

* Arbitrary function transforms on Scatters

* Transform differential to integral histos... or allow representation/querying
  as such. How to do this if bin edges don't match?


AND AFTER THAT...

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Explicitly return NaN for profile histo points with no weight? Or throw LowStatsError?

* Terminal histos via WriterTerminal

* Bin division with binomial correlation (Efficiency1D)

* Write scripts to convert between data formats and to plot results.

* Template all classes on floating point type (default to double)


PERSISTENCY

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? The
  latter looks awesome...

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?
