YODA TODO list
==============

NOW

* Implement profile/profile -> scatter and
  scatter/scatter -> scatter. Also multiplication? (AB)

* Add a named Weights object, allowing named or vectorised fills? Autoconversion
  to/from double. Template on this, or use everywhere? (AB)

* Histo2D & Dbn2D (MICHAL)

* Multiple errors on Scatter2D via a vector of Error2D. Combination rule enum
  arg (QUAD, LIN) on error() method (DANIEL?)

* New "flat" file format: adapt WriterYODA and fill ReaderYODA. (HH)
  Need to persist the whole-histo Dbn1D/Dbn2Ds, and over/underflows.

* WriterFlat and ReaderFlat, for Scatter2D only. (HH)

* When we have Dbn2D: template the Axis1D and use Dbn1D for Histo1D and Dbn2D
  for Profile1D, then implement under-/overflow in Profile1D and write it out
  in WriterYODA.  (HH)

* Histo1D::integral(bin1id, bin2id) (AB)


NEXT

* Slicing and marginalising of 2D histos and profiles.

* Rebinning:
  merge of 2 adjacent bins -- no gaps allowed
  merges of n adjacent bins (via iterator ranges)
  global rebinning by integer factor (on widths or on bin groups?)

* Implement _setstate for Histo1D and Profile1D.

* Test that a y-binned Histo2D has the same per-y-column stats as an
  equivalently x-binned Profile1D. (MICHAL)



* Counter type (mostly a UI/persistency wrapper on Dbn1D)

* Axis::scale -> scaleX, scaleY, scaleXY to Scatter2D.

* Profile2D & Dbn3D

* Error correlations?

* Tests:
  Add bin-comparison and negative-weighted mean test(s)
  Test bin-by-index sorted behaviour on Histo and Profile

* Arbitrary function transforms on Scatters

* Transform differential to integral histos... or allow representation/querying
  as such. How to do this if bin edges don't match?


AND AFTER THAT...

* Scatter2D -> Scatter<N> again (?) with specialisations for 1D, 2D and 3D

* Explicitly return NaN for profile histo points with no weight? Or throw LowStatsError?

* Terminal histos via WriterTerminal

* Bin division with binomial correlation (Efficiency1D)

* Write scripts to convert between data formats and to plot results.



PERSISTENCY

* Look into pickling of C++ interfaced classes. WriterS10n? MessagePack? The
  latter looks awesome...

* Store enough information for datafile merging to be well defined
  That means appropriate statistical combinations for each data type.

* Store "norm" and "scale" as members (and write out in histo header)
   Rather than convert type or scale internally. API for this?

Data line definition:
H1D: xl xh y dy w w2 n wx wx2 (dysys,...)
P1D: xl xh y dy w w2 n wx wx2 wy wy2 (dysys,...)?
Define integration with Hendrik's flat format:
"#" marks for comments: gnuplot compatibility
Metadata as special comments
Suggesting logx, logy, etc.?
