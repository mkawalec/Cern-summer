# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yodawrap', [dirname(__file__)])
        except ImportError:
            import _yodawrap
            return _yodawrap
        if fp is not None:
            try:
                _mod = imp.load_module('_yodawrap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yodawrap = swig_import_helper()
    del swig_import_helper
else:
    import _yodawrap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yodawrap.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _yodawrap.SwigPyIterator_value(self)
    def incr(self, n = 1): return _yodawrap.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _yodawrap.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _yodawrap.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _yodawrap.SwigPyIterator_equal(self, *args)
    def copy(self): return _yodawrap.SwigPyIterator_copy(self)
    def next(self): return _yodawrap.SwigPyIterator_next(self)
    def __next__(self): return _yodawrap.SwigPyIterator___next__(self)
    def previous(self): return _yodawrap.SwigPyIterator_previous(self)
    def advance(self, *args): return _yodawrap.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _yodawrap.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _yodawrap.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _yodawrap.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _yodawrap.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _yodawrap.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _yodawrap.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _yodawrap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleList, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.DoubleList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.DoubleList___nonzero__(self)
    def __bool__(self): return _yodawrap.DoubleList___bool__(self)
    def __len__(self): return _yodawrap.DoubleList___len__(self)
    def pop(self): return _yodawrap.DoubleList_pop(self)
    def __getslice__(self, *args): return _yodawrap.DoubleList___getslice__(self, *args)
    def __setslice__(self, *args): return _yodawrap.DoubleList___setslice__(self, *args)
    def __delslice__(self, *args): return _yodawrap.DoubleList___delslice__(self, *args)
    def __delitem__(self, *args): return _yodawrap.DoubleList___delitem__(self, *args)
    def __getitem__(self, *args): return _yodawrap.DoubleList___getitem__(self, *args)
    def __setitem__(self, *args): return _yodawrap.DoubleList___setitem__(self, *args)
    def append(self, *args): return _yodawrap.DoubleList_append(self, *args)
    def empty(self): return _yodawrap.DoubleList_empty(self)
    def size(self): return _yodawrap.DoubleList_size(self)
    def clear(self): return _yodawrap.DoubleList_clear(self)
    def swap(self, *args): return _yodawrap.DoubleList_swap(self, *args)
    def get_allocator(self): return _yodawrap.DoubleList_get_allocator(self)
    def begin(self): return _yodawrap.DoubleList_begin(self)
    def end(self): return _yodawrap.DoubleList_end(self)
    def rbegin(self): return _yodawrap.DoubleList_rbegin(self)
    def rend(self): return _yodawrap.DoubleList_rend(self)
    def pop_back(self): return _yodawrap.DoubleList_pop_back(self)
    def erase(self, *args): return _yodawrap.DoubleList_erase(self, *args)
    def __init__(self, *args): 
        this = _yodawrap.new_DoubleList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yodawrap.DoubleList_push_back(self, *args)
    def front(self): return _yodawrap.DoubleList_front(self)
    def back(self): return _yodawrap.DoubleList_back(self)
    def assign(self, *args): return _yodawrap.DoubleList_assign(self, *args)
    def resize(self, *args): return _yodawrap.DoubleList_resize(self, *args)
    def insert(self, *args): return _yodawrap.DoubleList_insert(self, *args)
    def reserve(self, *args): return _yodawrap.DoubleList_reserve(self, *args)
    def capacity(self): return _yodawrap.DoubleList_capacity(self)
    __swig_destroy__ = _yodawrap.delete_DoubleList
    __del__ = lambda self : None;
DoubleList_swigregister = _yodawrap.DoubleList_swigregister
DoubleList_swigregister(DoubleList)

class DoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_DoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _yodawrap.DoublePair_first_set
    __swig_getmethods__["first"] = _yodawrap.DoublePair_first_get
    if _newclass:first = _swig_property(_yodawrap.DoublePair_first_get, _yodawrap.DoublePair_first_set)
    __swig_setmethods__["second"] = _yodawrap.DoublePair_second_set
    __swig_getmethods__["second"] = _yodawrap.DoublePair_second_get
    if _newclass:second = _swig_property(_yodawrap.DoublePair_second_get, _yodawrap.DoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _yodawrap.delete_DoublePair
    __del__ = lambda self : None;
DoublePair_swigregister = _yodawrap.DoublePair_swigregister
DoublePair_swigregister(DoublePair)

class IntDoubleDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntDoubleDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntDoubleDict, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.IntDoubleDict_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.IntDoubleDict___nonzero__(self)
    def __bool__(self): return _yodawrap.IntDoubleDict___bool__(self)
    def __len__(self): return _yodawrap.IntDoubleDict___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _yodawrap.IntDoubleDict___getitem__(self, *args)
    def __delitem__(self, *args): return _yodawrap.IntDoubleDict___delitem__(self, *args)
    def has_key(self, *args): return _yodawrap.IntDoubleDict_has_key(self, *args)
    def keys(self): return _yodawrap.IntDoubleDict_keys(self)
    def values(self): return _yodawrap.IntDoubleDict_values(self)
    def items(self): return _yodawrap.IntDoubleDict_items(self)
    def __contains__(self, *args): return _yodawrap.IntDoubleDict___contains__(self, *args)
    def key_iterator(self): return _yodawrap.IntDoubleDict_key_iterator(self)
    def value_iterator(self): return _yodawrap.IntDoubleDict_value_iterator(self)
    def __setitem__(self, *args): return _yodawrap.IntDoubleDict___setitem__(self, *args)
    def asdict(self): return _yodawrap.IntDoubleDict_asdict(self)
    def __init__(self, *args): 
        this = _yodawrap.new_IntDoubleDict(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _yodawrap.IntDoubleDict_empty(self)
    def size(self): return _yodawrap.IntDoubleDict_size(self)
    def clear(self): return _yodawrap.IntDoubleDict_clear(self)
    def swap(self, *args): return _yodawrap.IntDoubleDict_swap(self, *args)
    def get_allocator(self): return _yodawrap.IntDoubleDict_get_allocator(self)
    def begin(self): return _yodawrap.IntDoubleDict_begin(self)
    def end(self): return _yodawrap.IntDoubleDict_end(self)
    def rbegin(self): return _yodawrap.IntDoubleDict_rbegin(self)
    def rend(self): return _yodawrap.IntDoubleDict_rend(self)
    def count(self, *args): return _yodawrap.IntDoubleDict_count(self, *args)
    def erase(self, *args): return _yodawrap.IntDoubleDict_erase(self, *args)
    def find(self, *args): return _yodawrap.IntDoubleDict_find(self, *args)
    def lower_bound(self, *args): return _yodawrap.IntDoubleDict_lower_bound(self, *args)
    def upper_bound(self, *args): return _yodawrap.IntDoubleDict_upper_bound(self, *args)
    __swig_destroy__ = _yodawrap.delete_IntDoubleDict
    __del__ = lambda self : None;
IntDoubleDict_swigregister = _yodawrap.IntDoubleDict_swigregister
IntDoubleDict_swigregister(IntDoubleDict)

class AnalysisObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yodawrap.delete_AnalysisObject
    __del__ = lambda self : None;
    def reset(self): return _yodawrap.AnalysisObject_reset(self)
    def hasAnnotation(self, *args): return _yodawrap.AnalysisObject_hasAnnotation(self, *args)
    def annotations(self): return _yodawrap.AnalysisObject_annotations(self)
    def setAnnotations(self, *args): return _yodawrap.AnalysisObject_setAnnotations(self, *args)
    def annotation(self, *args): return _yodawrap.AnalysisObject_annotation(self, *args)
    def rmAnnotation(self, *args): return _yodawrap.AnalysisObject_rmAnnotation(self, *args)
    def clearAnnotations(self): return _yodawrap.AnalysisObject_clearAnnotations(self)
    def title(self): return _yodawrap.AnalysisObject_title(self)
    def setTitle(self, *args): return _yodawrap.AnalysisObject_setTitle(self, *args)
    def path(self): return _yodawrap.AnalysisObject_path(self)
    def setPath(self, *args): return _yodawrap.AnalysisObject_setPath(self, *args)
    def type(self): return _yodawrap.AnalysisObject_type(self)
    def setAnnotation(self, *args): return _yodawrap.AnalysisObject_setAnnotation(self, *args)
    def addAnnotation(self, *args): return _yodawrap.AnalysisObject_addAnnotation(self, *args)
AnalysisObject_swigregister = _yodawrap.AnalysisObject_swigregister
AnalysisObject_swigregister(AnalysisObject)

class Bin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def reset(self): return _yodawrap.Bin_reset(self)
    def numEntries(self): return _yodawrap.Bin_numEntries(self)
    def sumW(self): return _yodawrap.Bin_sumW(self)
    def sumW2(self): return _yodawrap.Bin_sumW2(self)
    __swig_destroy__ = _yodawrap.delete_Bin
    __del__ = lambda self : None;
Bin_swigregister = _yodawrap.Bin_swigregister
Bin_swigregister(Bin)

class Bin1D(Bin):
    __swig_setmethods__ = {}
    for _s in [Bin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Bin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_Bin1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _yodawrap.Bin1D_reset(self)
    def lowEdge(self): return _yodawrap.Bin1D_lowEdge(self)
    def xMin(self): return _yodawrap.Bin1D_xMin(self)
    def highEdge(self): return _yodawrap.Bin1D_highEdge(self)
    def xMax(self): return _yodawrap.Bin1D_xMax(self)
    def edges(self): return _yodawrap.Bin1D_edges(self)
    def width(self): return _yodawrap.Bin1D_width(self)
    def focus(self): return _yodawrap.Bin1D_focus(self)
    def midpoint(self): return _yodawrap.Bin1D_midpoint(self)
    def xMean(self): return _yodawrap.Bin1D_xMean(self)
    def xVariance(self): return _yodawrap.Bin1D_xVariance(self)
    def xStdDev(self): return _yodawrap.Bin1D_xStdDev(self)
    def xStdError(self): return _yodawrap.Bin1D_xStdError(self)
    def numEntries(self): return _yodawrap.Bin1D_numEntries(self)
    def sumW(self): return _yodawrap.Bin1D_sumW(self)
    def sumW2(self): return _yodawrap.Bin1D_sumW2(self)
    def sumWX(self): return _yodawrap.Bin1D_sumWX(self)
    def sumWX2(self): return _yodawrap.Bin1D_sumWX2(self)
    def __iadd__(self, *args): return _yodawrap.Bin1D___iadd__(self, *args)
    def __isub__(self, *args): return _yodawrap.Bin1D___isub__(self, *args)
    __swig_destroy__ = _yodawrap.delete_Bin1D
    __del__ = lambda self : None;
Bin1D_swigregister = _yodawrap.Bin1D_swigregister
Bin1D_swigregister(Bin1D)

class HistoBin1D(Bin1D):
    __swig_setmethods__ = {}
    for _s in [Bin1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoBin1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Bin1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistoBin1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_HistoBin1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return _yodawrap.HistoBin1D_fill(self, *args)
    def fillBin(self, weight = 1.0): return _yodawrap.HistoBin1D_fillBin(self, weight)
    def reset(self): return _yodawrap.HistoBin1D_reset(self)
    def scaleW(self, *args): return _yodawrap.HistoBin1D_scaleW(self, *args)
    def area(self): return _yodawrap.HistoBin1D_area(self)
    def height(self): return _yodawrap.HistoBin1D_height(self)
    def areaErr(self): return _yodawrap.HistoBin1D_areaErr(self)
    def areaError(self): return _yodawrap.HistoBin1D_areaError(self)
    def heightErr(self): return _yodawrap.HistoBin1D_heightErr(self)
    def heightError(self): return _yodawrap.HistoBin1D_heightError(self)
    def __iadd__(self, *args): return _yodawrap.HistoBin1D___iadd__(self, *args)
    def __isub__(self, *args): return _yodawrap.HistoBin1D___isub__(self, *args)
    __swig_destroy__ = _yodawrap.delete_HistoBin1D
    __del__ = lambda self : None;
HistoBin1D_swigregister = _yodawrap.HistoBin1D_swigregister
HistoBin1D_swigregister(HistoBin1D)

class Histo1D(AnalysisObject):
    __swig_setmethods__ = {}
    for _s in [AnalysisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histo1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalysisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histo1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_Histo1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def type(self): return _yodawrap.Histo1D_type(self)
    def fill(self, *args): return _yodawrap.Histo1D_fill(self, *args)
    def reset(self): return _yodawrap.Histo1D_reset(self)
    def scaleW(self, *args): return _yodawrap.Histo1D_scaleW(self, *args)
    def numBins(self): return _yodawrap.Histo1D_numBins(self)
    def lowEdge(self): return _yodawrap.Histo1D_lowEdge(self)
    def highEdge(self): return _yodawrap.Histo1D_highEdge(self)
    def bins(self, *args): return _yodawrap.Histo1D_bins(self, *args)
    def bin(self, *args): return _yodawrap.Histo1D_bin(self, *args)
    def binByCoord(self, *args): return _yodawrap.Histo1D_binByCoord(self, *args)
    def underflow(self, *args): return _yodawrap.Histo1D_underflow(self, *args)
    def overflow(self, *args): return _yodawrap.Histo1D_overflow(self, *args)
    def integral(self, includeoverflows = True): return _yodawrap.Histo1D_integral(self, includeoverflows)
    def sumW(self, includeoverflows = True): return _yodawrap.Histo1D_sumW(self, includeoverflows)
    def sumW2(self, includeoverflows = True): return _yodawrap.Histo1D_sumW2(self, includeoverflows)
    def mean(self, includeoverflows = True): return _yodawrap.Histo1D_mean(self, includeoverflows)
    def variance(self, includeoverflows = True): return _yodawrap.Histo1D_variance(self, includeoverflows)
    def stdDev(self, includeoverflows = True): return _yodawrap.Histo1D_stdDev(self, includeoverflows)
    def __iadd__(self, *args): return _yodawrap.Histo1D___iadd__(self, *args)
    def __isub__(self, *args): return _yodawrap.Histo1D___isub__(self, *args)
    __swig_destroy__ = _yodawrap.delete_Histo1D
    __del__ = lambda self : None;
Histo1D_swigregister = _yodawrap.Histo1D_swigregister
Histo1D_swigregister(Histo1D)

class HistoBin1Ds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoBin1Ds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoBin1Ds, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.HistoBin1Ds_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.HistoBin1Ds___nonzero__(self)
    def __bool__(self): return _yodawrap.HistoBin1Ds___bool__(self)
    def __len__(self): return _yodawrap.HistoBin1Ds___len__(self)
    def __getslice__(self, *args): return _yodawrap.HistoBin1Ds___getslice__(self, *args)
    def __setslice__(self, *args): return _yodawrap.HistoBin1Ds___setslice__(self, *args)
    def __delslice__(self, *args): return _yodawrap.HistoBin1Ds___delslice__(self, *args)
    def __delitem__(self, *args): return _yodawrap.HistoBin1Ds___delitem__(self, *args)
    def __getitem__(self, *args): return _yodawrap.HistoBin1Ds___getitem__(self, *args)
    def __setitem__(self, *args): return _yodawrap.HistoBin1Ds___setitem__(self, *args)
    def append(self, *args): return _yodawrap.HistoBin1Ds_append(self, *args)
    def empty(self): return _yodawrap.HistoBin1Ds_empty(self)
    def size(self): return _yodawrap.HistoBin1Ds_size(self)
    def clear(self): return _yodawrap.HistoBin1Ds_clear(self)
    def swap(self, *args): return _yodawrap.HistoBin1Ds_swap(self, *args)
    def get_allocator(self): return _yodawrap.HistoBin1Ds_get_allocator(self)
    def begin(self): return _yodawrap.HistoBin1Ds_begin(self)
    def end(self): return _yodawrap.HistoBin1Ds_end(self)
    def rbegin(self): return _yodawrap.HistoBin1Ds_rbegin(self)
    def rend(self): return _yodawrap.HistoBin1Ds_rend(self)
    def pop_back(self): return _yodawrap.HistoBin1Ds_pop_back(self)
    def erase(self, *args): return _yodawrap.HistoBin1Ds_erase(self, *args)
    def __init__(self, *args): 
        this = _yodawrap.new_HistoBin1Ds(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yodawrap.HistoBin1Ds_push_back(self, *args)
    def front(self): return _yodawrap.HistoBin1Ds_front(self)
    def back(self): return _yodawrap.HistoBin1Ds_back(self)
    def assign(self, *args): return _yodawrap.HistoBin1Ds_assign(self, *args)
    def resize(self, *args): return _yodawrap.HistoBin1Ds_resize(self, *args)
    def insert(self, *args): return _yodawrap.HistoBin1Ds_insert(self, *args)
    def reserve(self, *args): return _yodawrap.HistoBin1Ds_reserve(self, *args)
    def capacity(self): return _yodawrap.HistoBin1Ds_capacity(self)
    __swig_destroy__ = _yodawrap.delete_HistoBin1Ds
    __del__ = lambda self : None;
HistoBin1Ds_swigregister = _yodawrap.HistoBin1Ds_swigregister
HistoBin1Ds_swigregister(HistoBin1Ds)

class ProfileBin1D(Bin1D):
    __swig_setmethods__ = {}
    for _s in [Bin1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProfileBin1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Bin1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProfileBin1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_ProfileBin1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return _yodawrap.ProfileBin1D_fill(self, *args)
    def fillBin(self, *args): return _yodawrap.ProfileBin1D_fillBin(self, *args)
    def reset(self): return _yodawrap.ProfileBin1D_reset(self)
    def scaleW(self, *args): return _yodawrap.ProfileBin1D_scaleW(self, *args)
    def mean(self): return _yodawrap.ProfileBin1D_mean(self)
    def stdDev(self): return _yodawrap.ProfileBin1D_stdDev(self)
    def variance(self): return _yodawrap.ProfileBin1D_variance(self)
    def stdErr(self): return _yodawrap.ProfileBin1D_stdErr(self)
    def __iadd__(self, *args): return _yodawrap.ProfileBin1D___iadd__(self, *args)
    def __isub__(self, *args): return _yodawrap.ProfileBin1D___isub__(self, *args)
    def sumWY(self): return _yodawrap.ProfileBin1D_sumWY(self)
    def sumWY2(self): return _yodawrap.ProfileBin1D_sumWY2(self)
    __swig_destroy__ = _yodawrap.delete_ProfileBin1D
    __del__ = lambda self : None;
ProfileBin1D_swigregister = _yodawrap.ProfileBin1D_swigregister
ProfileBin1D_swigregister(ProfileBin1D)

class Profile1D(AnalysisObject):
    __swig_setmethods__ = {}
    for _s in [AnalysisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Profile1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalysisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Profile1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_Profile1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def type(self): return _yodawrap.Profile1D_type(self)
    def fill(self, *args): return _yodawrap.Profile1D_fill(self, *args)
    def reset(self): return _yodawrap.Profile1D_reset(self)
    def scaleW(self, *args): return _yodawrap.Profile1D_scaleW(self, *args)
    def numBins(self): return _yodawrap.Profile1D_numBins(self)
    def bins(self, *args): return _yodawrap.Profile1D_bins(self, *args)
    def bin(self, *args): return _yodawrap.Profile1D_bin(self, *args)
    def binByCoord(self, *args): return _yodawrap.Profile1D_binByCoord(self, *args)
    def underflow(self, *args): return _yodawrap.Profile1D_underflow(self, *args)
    def overflow(self, *args): return _yodawrap.Profile1D_overflow(self, *args)
    def sumW(self, includeoverflows = True): return _yodawrap.Profile1D_sumW(self, includeoverflows)
    def sumW2(self, includeoverflows = True): return _yodawrap.Profile1D_sumW2(self, includeoverflows)
    def __iadd__(self, *args): return _yodawrap.Profile1D___iadd__(self, *args)
    def __isub__(self, *args): return _yodawrap.Profile1D___isub__(self, *args)
    __swig_destroy__ = _yodawrap.delete_Profile1D
    __del__ = lambda self : None;
Profile1D_swigregister = _yodawrap.Profile1D_swigregister
Profile1D_swigregister(Profile1D)

class ProfileBin1Ds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProfileBin1Ds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProfileBin1Ds, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.ProfileBin1Ds_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.ProfileBin1Ds___nonzero__(self)
    def __bool__(self): return _yodawrap.ProfileBin1Ds___bool__(self)
    def __len__(self): return _yodawrap.ProfileBin1Ds___len__(self)
    def __getslice__(self, *args): return _yodawrap.ProfileBin1Ds___getslice__(self, *args)
    def __setslice__(self, *args): return _yodawrap.ProfileBin1Ds___setslice__(self, *args)
    def __delslice__(self, *args): return _yodawrap.ProfileBin1Ds___delslice__(self, *args)
    def __delitem__(self, *args): return _yodawrap.ProfileBin1Ds___delitem__(self, *args)
    def __getitem__(self, *args): return _yodawrap.ProfileBin1Ds___getitem__(self, *args)
    def __setitem__(self, *args): return _yodawrap.ProfileBin1Ds___setitem__(self, *args)
    def append(self, *args): return _yodawrap.ProfileBin1Ds_append(self, *args)
    def empty(self): return _yodawrap.ProfileBin1Ds_empty(self)
    def size(self): return _yodawrap.ProfileBin1Ds_size(self)
    def clear(self): return _yodawrap.ProfileBin1Ds_clear(self)
    def swap(self, *args): return _yodawrap.ProfileBin1Ds_swap(self, *args)
    def get_allocator(self): return _yodawrap.ProfileBin1Ds_get_allocator(self)
    def begin(self): return _yodawrap.ProfileBin1Ds_begin(self)
    def end(self): return _yodawrap.ProfileBin1Ds_end(self)
    def rbegin(self): return _yodawrap.ProfileBin1Ds_rbegin(self)
    def rend(self): return _yodawrap.ProfileBin1Ds_rend(self)
    def pop_back(self): return _yodawrap.ProfileBin1Ds_pop_back(self)
    def erase(self, *args): return _yodawrap.ProfileBin1Ds_erase(self, *args)
    def __init__(self, *args): 
        this = _yodawrap.new_ProfileBin1Ds(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yodawrap.ProfileBin1Ds_push_back(self, *args)
    def front(self): return _yodawrap.ProfileBin1Ds_front(self)
    def back(self): return _yodawrap.ProfileBin1Ds_back(self)
    def assign(self, *args): return _yodawrap.ProfileBin1Ds_assign(self, *args)
    def resize(self, *args): return _yodawrap.ProfileBin1Ds_resize(self, *args)
    def insert(self, *args): return _yodawrap.ProfileBin1Ds_insert(self, *args)
    def reserve(self, *args): return _yodawrap.ProfileBin1Ds_reserve(self, *args)
    def capacity(self): return _yodawrap.ProfileBin1Ds_capacity(self)
    __swig_destroy__ = _yodawrap.delete_ProfileBin1Ds
    __del__ = lambda self : None;
ProfileBin1Ds_swigregister = _yodawrap.ProfileBin1Ds_swigregister
ProfileBin1Ds_swigregister(ProfileBin1Ds)

class Point2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_Point2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self): return _yodawrap.Point2D_x(self)
    def setX(self, *args): return _yodawrap.Point2D_setX(self, *args)
    def y(self): return _yodawrap.Point2D_y(self)
    def setY(self, *args): return _yodawrap.Point2D_setY(self, *args)
    def xErrs(self): return _yodawrap.Point2D_xErrs(self)
    def xErrMinus(self): return _yodawrap.Point2D_xErrMinus(self)
    def xErrPlus(self): return _yodawrap.Point2D_xErrPlus(self)
    def xErrAvg(self): return _yodawrap.Point2D_xErrAvg(self)
    def setXErr(self, *args): return _yodawrap.Point2D_setXErr(self, *args)
    def xMin(self): return _yodawrap.Point2D_xMin(self)
    def xMax(self): return _yodawrap.Point2D_xMax(self)
    def yErrs(self): return _yodawrap.Point2D_yErrs(self)
    def yErrMinus(self): return _yodawrap.Point2D_yErrMinus(self)
    def yErrPlus(self): return _yodawrap.Point2D_yErrPlus(self)
    def yErrAvg(self): return _yodawrap.Point2D_yErrAvg(self)
    def setYErr(self, *args): return _yodawrap.Point2D_setYErr(self, *args)
    def yMin(self): return _yodawrap.Point2D_yMin(self)
    def yMax(self): return _yodawrap.Point2D_yMax(self)
    __swig_destroy__ = _yodawrap.delete_Point2D
    __del__ = lambda self : None;
Point2D_swigregister = _yodawrap.Point2D_swigregister
Point2D_swigregister(Point2D)


def __eq__(*args):
  return _yodawrap.__eq__(*args)
__eq__ = _yodawrap.__eq__

def __ne__(*args):
  return _yodawrap.__ne__(*args)
__ne__ = _yodawrap.__ne__

def __le__(*args):
  return _yodawrap.__le__(*args)
__le__ = _yodawrap.__le__

def __gt__(*args):
  return _yodawrap.__gt__(*args)
__gt__ = _yodawrap.__gt__

def __ge__(*args):
  return _yodawrap.__ge__(*args)
__ge__ = _yodawrap.__ge__
class Scatter2D(AnalysisObject):
    __swig_setmethods__ = {}
    for _s in [AnalysisObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scatter2D, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalysisObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scatter2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _yodawrap.new_Scatter2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _yodawrap.Scatter2D_reset(self)
    def numPoints(self): return _yodawrap.Scatter2D_numPoints(self)
    def points(self): return _yodawrap.Scatter2D_points(self)
    def point(self, *args): return _yodawrap.Scatter2D_point(self, *args)
    def addPoint(self, *args): return _yodawrap.Scatter2D_addPoint(self, *args)
    def addPoints(self, *args): return _yodawrap.Scatter2D_addPoints(self, *args)
    def combineWith(self, *args): return _yodawrap.Scatter2D_combineWith(self, *args)
    __swig_destroy__ = _yodawrap.delete_Scatter2D
    __del__ = lambda self : None;
Scatter2D_swigregister = _yodawrap.Scatter2D_swigregister
Scatter2D_swigregister(Scatter2D)

def __lt__(*args):
  return _yodawrap.__lt__(*args)
__lt__ = _yodawrap.__lt__

class AOVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AOVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AOVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.AOVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.AOVector___nonzero__(self)
    def __bool__(self): return _yodawrap.AOVector___bool__(self)
    def __len__(self): return _yodawrap.AOVector___len__(self)
    def pop(self): return _yodawrap.AOVector_pop(self)
    def __getslice__(self, *args): return _yodawrap.AOVector___getslice__(self, *args)
    def __setslice__(self, *args): return _yodawrap.AOVector___setslice__(self, *args)
    def __delslice__(self, *args): return _yodawrap.AOVector___delslice__(self, *args)
    def __delitem__(self, *args): return _yodawrap.AOVector___delitem__(self, *args)
    def __getitem__(self, *args): return _yodawrap.AOVector___getitem__(self, *args)
    def __setitem__(self, *args): return _yodawrap.AOVector___setitem__(self, *args)
    def append(self, *args): return _yodawrap.AOVector_append(self, *args)
    def empty(self): return _yodawrap.AOVector_empty(self)
    def size(self): return _yodawrap.AOVector_size(self)
    def clear(self): return _yodawrap.AOVector_clear(self)
    def swap(self, *args): return _yodawrap.AOVector_swap(self, *args)
    def get_allocator(self): return _yodawrap.AOVector_get_allocator(self)
    def begin(self): return _yodawrap.AOVector_begin(self)
    def end(self): return _yodawrap.AOVector_end(self)
    def rbegin(self): return _yodawrap.AOVector_rbegin(self)
    def rend(self): return _yodawrap.AOVector_rend(self)
    def pop_back(self): return _yodawrap.AOVector_pop_back(self)
    def erase(self, *args): return _yodawrap.AOVector_erase(self, *args)
    def __init__(self, *args): 
        this = _yodawrap.new_AOVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yodawrap.AOVector_push_back(self, *args)
    def front(self): return _yodawrap.AOVector_front(self)
    def back(self): return _yodawrap.AOVector_back(self)
    def assign(self, *args): return _yodawrap.AOVector_assign(self, *args)
    def resize(self, *args): return _yodawrap.AOVector_resize(self, *args)
    def insert(self, *args): return _yodawrap.AOVector_insert(self, *args)
    def reserve(self, *args): return _yodawrap.AOVector_reserve(self, *args)
    def capacity(self): return _yodawrap.AOVector_capacity(self)
    __swig_destroy__ = _yodawrap.delete_AOVector
    __del__ = lambda self : None;
AOVector_swigregister = _yodawrap.AOVector_swigregister
AOVector_swigregister(AOVector)

def combine(*args):
  return _yodawrap.combine(*args)
combine = _yodawrap.combine

def mkScatter(*args):
  return _yodawrap.mkScatter(*args)
mkScatter = _yodawrap.mkScatter

def __add__(*args):
  return _yodawrap.__add__(*args)
__add__ = _yodawrap.__add__

def __sub__(*args):
  return _yodawrap.__sub__(*args)
__sub__ = _yodawrap.__sub__

def __div__(*args):
  return _yodawrap.__div__(*args)
__div__ = _yodawrap.__div__

class AOList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AOList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AOList, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.AOList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.AOList___nonzero__(self)
    def __bool__(self): return _yodawrap.AOList___bool__(self)
    def __len__(self): return _yodawrap.AOList___len__(self)
    def pop(self): return _yodawrap.AOList_pop(self)
    def __getslice__(self, *args): return _yodawrap.AOList___getslice__(self, *args)
    def __setslice__(self, *args): return _yodawrap.AOList___setslice__(self, *args)
    def __delslice__(self, *args): return _yodawrap.AOList___delslice__(self, *args)
    def __delitem__(self, *args): return _yodawrap.AOList___delitem__(self, *args)
    def __getitem__(self, *args): return _yodawrap.AOList___getitem__(self, *args)
    def __setitem__(self, *args): return _yodawrap.AOList___setitem__(self, *args)
    def append(self, *args): return _yodawrap.AOList_append(self, *args)
    def empty(self): return _yodawrap.AOList_empty(self)
    def size(self): return _yodawrap.AOList_size(self)
    def clear(self): return _yodawrap.AOList_clear(self)
    def swap(self, *args): return _yodawrap.AOList_swap(self, *args)
    def get_allocator(self): return _yodawrap.AOList_get_allocator(self)
    def begin(self): return _yodawrap.AOList_begin(self)
    def end(self): return _yodawrap.AOList_end(self)
    def rbegin(self): return _yodawrap.AOList_rbegin(self)
    def rend(self): return _yodawrap.AOList_rend(self)
    def pop_back(self): return _yodawrap.AOList_pop_back(self)
    def erase(self, *args): return _yodawrap.AOList_erase(self, *args)
    def __init__(self, *args): 
        this = _yodawrap.new_AOList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _yodawrap.AOList_push_back(self, *args)
    def front(self): return _yodawrap.AOList_front(self)
    def back(self): return _yodawrap.AOList_back(self)
    def assign(self, *args): return _yodawrap.AOList_assign(self, *args)
    def resize(self, *args): return _yodawrap.AOList_resize(self, *args)
    def insert(self, *args): return _yodawrap.AOList_insert(self, *args)
    def pop_front(self): return _yodawrap.AOList_pop_front(self)
    def push_front(self, *args): return _yodawrap.AOList_push_front(self, *args)
    def remove(self, *args): return _yodawrap.AOList_remove(self, *args)
    def unique(self): return _yodawrap.AOList_unique(self)
    def reverse(self): return _yodawrap.AOList_reverse(self)
    def sort(self): return _yodawrap.AOList_sort(self)
    def merge(self, *args): return _yodawrap.AOList_merge(self, *args)
    __swig_destroy__ = _yodawrap.delete_AOList
    __del__ = lambda self : None;
AOList_swigregister = _yodawrap.AOList_swigregister
AOList_swigregister(AOList)

class AOSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AOSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AOSet, name)
    __repr__ = _swig_repr
    def iterator(self): return _yodawrap.AOSet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _yodawrap.AOSet___nonzero__(self)
    def __bool__(self): return _yodawrap.AOSet___bool__(self)
    def __len__(self): return _yodawrap.AOSet___len__(self)
    def append(self, *args): return _yodawrap.AOSet_append(self, *args)
    def __contains__(self, *args): return _yodawrap.AOSet___contains__(self, *args)
    def __getitem__(self, *args): return _yodawrap.AOSet___getitem__(self, *args)
    def __init__(self, *args): 
        this = _yodawrap.new_AOSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _yodawrap.AOSet_empty(self)
    def size(self): return _yodawrap.AOSet_size(self)
    def clear(self): return _yodawrap.AOSet_clear(self)
    def swap(self, *args): return _yodawrap.AOSet_swap(self, *args)
    def count(self, *args): return _yodawrap.AOSet_count(self, *args)
    def begin(self): return _yodawrap.AOSet_begin(self)
    def end(self): return _yodawrap.AOSet_end(self)
    def rbegin(self): return _yodawrap.AOSet_rbegin(self)
    def rend(self): return _yodawrap.AOSet_rend(self)
    def erase(self, *args): return _yodawrap.AOSet_erase(self, *args)
    def find(self, *args): return _yodawrap.AOSet_find(self, *args)
    def lower_bound(self, *args): return _yodawrap.AOSet_lower_bound(self, *args)
    def upper_bound(self, *args): return _yodawrap.AOSet_upper_bound(self, *args)
    def equal_range(self, *args): return _yodawrap.AOSet_equal_range(self, *args)
    def insert(self, *args): return _yodawrap.AOSet_insert(self, *args)
    __swig_destroy__ = _yodawrap.delete_AOSet
    __del__ = lambda self : None;
AOSet_swigregister = _yodawrap.AOSet_swigregister
AOSet_swigregister(AOSet)

class Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Writer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _yodawrap.delete_Writer
    __del__ = lambda self : None;
    def write(self, *args): return _yodawrap.Writer_write(self, *args)
Writer_swigregister = _yodawrap.Writer_swigregister
Writer_swigregister(Writer)

class WriterAIDA(Writer):
    __swig_setmethods__ = {}
    for _s in [Writer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriterAIDA, name, value)
    __swig_getmethods__ = {}
    for _s in [Writer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriterAIDA, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _yodawrap.WriterAIDA_create
    if _newclass:create = staticmethod(_yodawrap.WriterAIDA_create)
    __swig_destroy__ = _yodawrap.delete_WriterAIDA
    __del__ = lambda self : None;
WriterAIDA_swigregister = _yodawrap.WriterAIDA_swigregister
WriterAIDA_swigregister(WriterAIDA)

def WriterAIDA_create():
  return _yodawrap.WriterAIDA_create()
WriterAIDA_create = _yodawrap.WriterAIDA_create

class WriterYODA(Writer):
    __swig_setmethods__ = {}
    for _s in [Writer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriterYODA, name, value)
    __swig_getmethods__ = {}
    for _s in [Writer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriterYODA, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _yodawrap.WriterYODA_create
    if _newclass:create = staticmethod(_yodawrap.WriterYODA_create)
    __swig_destroy__ = _yodawrap.delete_WriterYODA
    __del__ = lambda self : None;
WriterYODA_swigregister = _yodawrap.WriterYODA_swigregister
WriterYODA_swigregister(WriterYODA)

def WriterYODA_create():
  return _yodawrap.WriterYODA_create()
WriterYODA_create = _yodawrap.WriterYODA_create

# This file is compatible with both classic and new-style classes.


